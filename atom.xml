<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个好人</title>
  
  <subtitle>这世上天才很少，懒蛋却很多，你若对得起时间，时间便对得起你！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jingguanghui.github.io/"/>
  <updated>2018-05-20T13:53:04.778Z</updated>
  <id>https://jingguanghui.github.io/</id>
  
  <author>
    <name>景光辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux入门（五）Linux文件与目录管理</title>
    <link href="https://jingguanghui.github.io/2018/05/19/Linux_5/"/>
    <id>https://jingguanghui.github.io/2018/05/19/Linux_5/</id>
    <published>2018-05-19T09:34:27.000Z</published>
    <updated>2018-05-20T13:53:04.778Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/linux.jpg" alt="Linux" style="width:100%"><br><a id="more"></a></p><h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h2><p>在Linux中什么是一个文件的路径呢，说白了就是这个文件存在的地方，例如/root/.ssh/authorized_keys这就是一个文件的路径。如果你告诉系统这个文件的路径，那么系统就可以找到这个文件。在Linux的世界中，存在着绝对路径和相对路径。</p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>路径的写法一定由根目录”/”写起，例如/usr/local/mysql 这就是绝对路径。</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>路径的写法不是由根目录”/”写起，例如，首先用户进入到/ ，然后再进入到home，命令为 cd /home，然后 cd test，此时用户所在的路径为/home/test。第一个cd命令后跟 /home，第二个cd命令后跟test，并没有斜杠，这个test是相对于/home 目录来讲的，所以叫做相对路径。</p><h2 id="一些常用的指令"><a href="#一些常用的指令" class="headerlink" title="一些常用的指令"></a>一些常用的指令</h2><p><strong>pwd</strong> 这个命令打印出当前所在目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# pwd</span><br><span class="line">/root</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p><strong>cd</strong> 进入到某一个目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /usr/local</span><br><span class="line">[root@localhost local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@localhost local]#</span><br></pre></td></tr></table></figure></p><p><strong>./</strong> 指的是当前目录</p><p><strong>../</strong> 指的是当前目录的上一级目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# cd /usr/local/lib/</span><br><span class="line">[root@localhost lib]# pwd</span><br><span class="line">/usr/local/lib</span><br><span class="line">[root@localhost lib]# cd ./</span><br><span class="line">[root@localhost lib]# pwd</span><br><span class="line">/usr/local/lib</span><br><span class="line">[root@localhost lib]# cd ../</span><br><span class="line">[root@localhost local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@localhost local]#</span><br></pre></td></tr></table></figure></p><p>首先进入到/usr/local/lib/目录下，然后再进入./其实还是进入到当前目录下，用pwd查看当前目录，并没有发生变化，然后再进入../ 则是进入到了/usr/local/目录下，即/usr/local/lib目录的上一级目录。</p><p><strong>mkdir</strong> 创建一个目录。mkdir其实就是make directory的缩写。其语法为mkdir [-mp] [目录名称]，其中-m , –p 为其选项，-m：这个参数用来指定要创建目录的权限，该参数不常用，所以不做重点解释。-p：这个参数很管用的，先来做个试验，就会一目了然了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# mkdir /tmp/test/123</span><br><span class="line">mkdir: 无法创建目录&quot;/tmp/test/123&quot;: 没有那个文件或目录</span><br><span class="line">[root@localhost local]# ls /tmp/test/</span><br><span class="line">ls: 无法访问/tmp/test/: 没有那个文件或目录</span><br><span class="line">[root@localhost local]#</span><br></pre></td></tr></table></figure></p><p>当我们想创建/tmp/test/123目录，可是提示不能创建，原因是/tmp/test目录不存在，你会说，这个Linux怎么这傻，/tmp/test目录不存在就自动创建不就OK了嘛，的确Linux确实很傻，如果它发现要创建的目录的上一级目录不存在就会报错。然后Linux也为我们想好了解决办法，即-p参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# mkdir -p /tmp/test/123</span><br><span class="line">[root@localhost local]# ls /tmp/test/</span><br><span class="line">123</span><br><span class="line">[root@localhost local]#</span><br></pre></td></tr></table></figure></p><p>-p 它的作用就是递归创建目录，即使上级目录不存在。还有一种情况就是如果你想要创建的目录存在的话，会提示报错，然后你加上-p参数后，就不会报错，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# mkdir /tmp/test/123</span><br><span class="line">mkdir: 无法创建目录&quot;/tmp/test/123&quot;: 文件已存在</span><br><span class="line">[root@localhost local]# mkdir -p /tmp/test/123</span><br><span class="line">[root@localhost local]#</span><br></pre></td></tr></table></figure></p><p><strong>rmdir</strong> 删除一个目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# ls /tmp/test</span><br><span class="line">123</span><br><span class="line">[root@localhost local]# rmdir /tmp/test/123</span><br><span class="line">[root@localhost local]# ls /tmp/test</span><br><span class="line">[root@localhost local]#</span><br></pre></td></tr></table></figure><p>rmdir,其实是rmove directory缩写，其只有一个选项-p 类似与mkdir命令，这个参数的作用是将上级目录一起删除。<br>举个例子吧，新建目录mkdir -p d1/d2/d3 ，rmdir -p d1/d2/d3相当于是删除了d1,d1/d2, d1/d2/d3。</p><p><strong>rm</strong> 删除目录或者文件。rmdir只能删除目录但不能删除文件，要想删除一个文件，则要用rm命令了。rm同样也有很多选项。可以通过man rm来获得详细帮助信息。在这里只列举较常用的几个选项。</p><p>-f 强制的意思，如果不加这个选项，当删除一个不存在的文件时会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# ls /tmp/111</span><br><span class="line">ls: 无法访问/tmp/111: 没有那个文件或目录</span><br><span class="line">[root@localhost local]# /bin/rm /tmp/111</span><br><span class="line">rm: 无法删除&quot;/tmp/111&quot;: 没有那个文件或目录</span><br><span class="line">[root@localhost local]# /bin/rm -f /tmp/111</span><br><span class="line">[root@localhost local]#</span><br></pre></td></tr></table></figure></p><p>当用户用rm删除一个文件时会提示用户是否真的删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rm /root/anaconda-ks.cfg</span><br><span class="line">rm：是否删除普通空文件 &quot;/root/anaconda-ks.cfg&quot;？n</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p>如果删除，输入y, 否则输入n</p><p>-r 当删除目录时，加该选项，如果不加这个选项会报错。rm是可以删除不为空的目录的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /tmp/test/123/</span><br><span class="line">[root@localhost ~]# ls /tmp/test/</span><br><span class="line">123</span><br><span class="line">[root@localhost ~]# rm /tmp/test/123</span><br><span class="line">rm: 无法删除&quot;/tmp/test/123&quot;: 是一个目录</span><br><span class="line">[root@localhost ~]# rm -r /tmp/test/123</span><br><span class="line">rm：是否删除目录 &quot;/tmp/test/123&quot;？y</span><br><span class="line">[root@localhost ~]# ls /tmp/test/</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /tmp/test/123/</span><br><span class="line">[root@localhost ~]# ls /tmp/test/</span><br><span class="line">123</span><br><span class="line">[root@localhost ~]# rm -r /tmp/test/</span><br><span class="line">rm：是否进入目录&quot;/tmp/test/&quot;? y</span><br><span class="line">rm：是否删除目录 &quot;/tmp/test/123&quot;？y</span><br><span class="line">rm：是否删除目录 &quot;/tmp/test/&quot;？y</span><br><span class="line">[root@localhost ~]# ls /tmp/test/</span><br><span class="line">ls: 无法访问/tmp/test/: 没有那个文件或目录</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><p>关于rm，使用最多便是-rf两个选项合用了。不管删除文件还是目录都可以。但是方便的同时也要多注意，万一你的手太快后边跟了/那样就会把你的系统文件全部删除的，切记切记。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /d1/d2/d3</span><br><span class="line">[root@localhost ~]# rm -r /d1</span><br><span class="line">rm：是否进入目录&quot;/d1&quot;? y</span><br><span class="line">rm：是否进入目录&quot;/d1/d2&quot;? y</span><br><span class="line">rm：是否删除目录 &quot;/d1/d2/d3&quot;？y</span><br><span class="line">rm：是否删除目录 &quot;/d1/d2&quot;？y</span><br><span class="line">rm：是否删除目录 &quot;/d1&quot;？y</span><br><span class="line">[root@localhost ~]# mkdir -p /d1/d2/d3</span><br><span class="line">[root@localhost ~]# rm -rf /d1</span><br><span class="line">[root@localhost ~]# ls /d1</span><br><span class="line">ls: 无法访问/d1: 没有那个文件或目录</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p><strong>which</strong> 用来查找一个命令的绝对路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# which rm</span><br><span class="line">alias rm=&apos;rm -i&apos;</span><br><span class="line">        /usr/bin/rm</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p><strong>alias</strong> 用来设置指令的别名。语法：alias[别名]=[指令名称]，例如 alias rm=’rm -i’ ，即当我们使用rm命令时，实际上是使用的是rm –i ，而用绝对路径的/user/bin/rm 则不会被alias，该命令在以后会详细介绍。</p><p><strong>ls</strong> 在前面的命令中多次用到它。它的作用就是查看某个目录或者某个文件，是list的简写。ls 后可以跟一个目录，也可以跟一个文件。以下是ls的选项，在这里并没有完全列出，只是列出了平时使用最多的选项。其他选项，你可以自行通过man ls查询。</p><p>-a 全部的档案都列出，包括隐藏的。linux文件系统中同样也有隐藏文件。这些隐藏文件的文件名是以.开头的。例如.test, /root/.123, /root/.ssh 等等，隐藏文件可以是目录也可以是普通文件。</p><p>-l 详细列出文件的属性信息，包括大小、创建日期、所属主所属组等等。ll这个命令等同于ls –l 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# which ll</span><br><span class="line">alias ll=&apos;ls -l --color=auto&apos;</span><br><span class="line">        /usr/bin/ls</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p>–color=never/always/auto never即不要显示颜色，always即总显示颜色，auto是由系统自行判断。</p><p>-d 后边跟目录，如果不加这个选项则列出目录下的文件，加上后只列车目录本身。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls -d /root/</span><br><span class="line">/root/</span><br><span class="line">[root@localhost ~]# ls /root</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p><strong>cp</strong> copy的简写，即拷贝。格式为cp [选项] [来源文件] [目的文件]，例如我想把test1拷贝成test2 输入以下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp test1 test2</span><br></pre></td></tr></table></figure></p><p>以下介绍几个常用的选项</p><p>-d 这里涉及到一个“连接”的概念。连接分为软连接和硬连接。这在以后会详细解释，现在只需要明白这里的软连接跟Windows中的快捷方式类似即可。如果不加这个-d 则拷贝软连接时会把软连接的目标文件拷贝过去，而加上后，其实只是拷贝了一个连接文件（即快捷方式）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /tmp/test/</span><br><span class="line">[root@localhost ~]# cd /tmp/test/</span><br><span class="line">[root@localhost test]# touch test</span><br><span class="line">[root@localhost test]# ln -s test test1</span><br><span class="line">[root@localhost test]# ls -l</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  20 12:48 test</span><br><span class="line">lrwxrwxrwx. 1 root root 4 5月  20 12:49 test1 -&gt; test</span><br><span class="line">[root@localhost test]# cp test1 test2</span><br><span class="line">[root@localhost test]# ls -l</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  20 12:48 test</span><br><span class="line">lrwxrwxrwx. 1 root root 4 5月  20 12:49 test1 -&gt; test</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  20 12:50 test2</span><br><span class="line">[root@localhost test]# cp -d test1 test3</span><br><span class="line">[root@localhost test]# ls -l</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  20 12:48 test</span><br><span class="line">lrwxrwxrwx. 1 root root 4 5月  20 12:49 test1 -&gt; test</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  20 12:50 test2</span><br><span class="line">lrwxrwxrwx. 1 root root 4 5月  20 12:50 test3 -&gt; test</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>上面的ln命令即为建立连接的，以后再做详细解释。</p><p>-r 如果你要拷贝一个目录，必须要加-r选项，否则你是拷贝不了目录的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# mkdir 123</span><br><span class="line">[root@localhost test]# ls</span><br><span class="line">123  test  test1  test2  test3</span><br><span class="line">[root@localhost test]# cp 123 111</span><br><span class="line">cp: 略过目录&quot;123&quot;</span><br><span class="line">[root@localhost test]# ls</span><br><span class="line">123  test  test1  test2  test3</span><br><span class="line">[root@localhost test]# cp -r 123 111</span><br><span class="line">[root@localhost test]# ls</span><br><span class="line">111  123  test  test1  test2  test3</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>-i 如果遇到一个存在的文件，会问是否覆盖。在Redhat/CentOS系统中，我们使用的cp其实是cp –i<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# which cp</span><br><span class="line">alias cp=&apos;cp -i&apos;</span><br><span class="line">        /usr/bin/cp</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# cd 123</span><br><span class="line">[root@localhost 123]# ls</span><br><span class="line">[root@localhost 123]# touch 111</span><br><span class="line">[root@localhost 123]# touch 222</span><br><span class="line">[root@localhost 123]# /usr/bin/cp -i 111 222</span><br><span class="line">/usr/bin/cp：是否覆盖&quot;222&quot;？ n</span><br><span class="line">[root@localhost 123]# echo &apos;abc&apos; &gt;111</span><br><span class="line">[root@localhost 123]# echo &apos;def&apos; &gt;222</span><br><span class="line">[root@localhost 123]# cat 111</span><br><span class="line">abc</span><br><span class="line">[root@localhost 123]# cat 222</span><br><span class="line">def</span><br><span class="line">[root@localhost 123]# /usr/bin/cp 111 222</span><br><span class="line">[root@localhost 123]# cat 222</span><br><span class="line">abc</span><br><span class="line">[root@localhost 123]#</span><br></pre></td></tr></table></figure><p>上面，touch 命令，看字面意思就是摸一下，没错，如果有这个文件，则会改变文件的访问时间，如果没有这个文件就会创建这个文件。前面说过echo，其实就是打印，在这里所echo的内容”abc”和“def”并没有显示在屏幕上，而是分别写进了文件111和222, 其写入作用的就是这个大于号”&gt;” 在Linux中这叫做重定向，即把前面产生的输出写入到后面的文件中。这在以后会做详细介绍，这里需要明白它的含义即可。而cat命令则是读一个文件，并把读出的内容打印到当前屏幕上。</p><p>-u 该选项仅当目标文件存在时才会生效，如果源文件比目标文件新才会拷贝，否则不做任何动作。</p><p><strong>mv</strong> 移动的意思，是move的简写。格式为mv [选项] [源文件] [目标文件]，下面介绍几个常用的选项。</p><p>-i 和cp的-i 一样，当目标文件存在时会问用户是否要覆盖。在Redhat/CentOS系统中，我们使用的mv其实是mv –i</p><p>-u 和上边cp命令的-u选项一个作用，当目标文件存在时才会生效，如果源文件比目标文件新才会移动，否则不做任何动作。</p><p>该命令有以下中情况</p><ol><li>目标文件是目录，而且目标文件不存在；</li><li>目标文件是目录，而且目标文件存在；</li><li>目标文件不是目录不存在；</li><li>目标文件不是目录存在；</li></ol><p>目标文件是目录，存在和不存在，移动的结果是不一样的，如果存在，则会把源文件移动到目标文件目录中。不存在的话移动完后，目标文件是一个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 123]# cd ../111</span><br><span class="line">[root@localhost 111]# ls</span><br><span class="line">[root@localhost 111]# mkdir aa bb</span><br><span class="line">[root@localhost 111]# ls</span><br><span class="line">aa  bb</span><br><span class="line">[root@localhost 111]# mv aa cc</span><br><span class="line">[root@localhost 111]# ls</span><br><span class="line">bb  cc</span><br><span class="line">[root@localhost 111]# mv cc bb</span><br><span class="line">[root@localhost 111]# ls</span><br><span class="line">bb</span><br><span class="line">[root@localhost 111]# ls bb</span><br><span class="line">cc</span><br><span class="line">[root@localhost 111]# touch dd</span><br><span class="line">[root@localhost 111]# ls</span><br><span class="line">bb  dd</span><br><span class="line">[root@localhost 111]# mv dd ee</span><br><span class="line">[root@localhost 111]# ls</span><br><span class="line">bb  ee</span><br><span class="line">[root@localhost 111]# mv ee bb</span><br><span class="line">[root@localhost 111]# ls bb</span><br><span class="line">cc  ee</span><br><span class="line">[root@localhost 111]#</span><br></pre></td></tr></table></figure></p><p>Windows下的重命名，在linux下用mv就可以搞定。<br><strong>cat</strong> 比较常用的一个命令，即查看一个文件的内容并显示在屏幕上。</p><p>-n 查看文件时，把行号也显示到屏幕上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 111]# echo &apos;123123 &apos; &gt;bb/ee</span><br><span class="line">[root@localhost 111]# echo &apos;456456 &apos; &gt;&gt;bb/ee</span><br><span class="line">[root@localhost 111]# cat bb/ee</span><br><span class="line">123123</span><br><span class="line">456456</span><br><span class="line">[root@localhost 111]# cat -n bb/ee</span><br><span class="line">     1  123123</span><br><span class="line">     2  456456</span><br><span class="line">[root@localhost 111]#</span><br></pre></td></tr></table></figure></p><p>上面出现了一个”&gt;&gt;”，这个符号跟前面介绍的”&gt;”的作用都是重定向，即把前面输出的东西输入到后边的文件中，只是”&gt;&gt;”是追加的意思，而用”&gt;”，如果文件中有内容则会删除文件中内容，而”&gt;&gt;”则不会。</p><p>-A 显示所有东西出来，包括特殊字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 111]# cat -A bb/ee</span><br><span class="line">123123 $</span><br><span class="line">456456 $</span><br><span class="line">[root@localhost 111]#</span><br></pre></td></tr></table></figure></p><p><strong>tac</strong> 其实是cat的反写，同样的功能也是反向打印文件的内容到屏幕上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 111]# tac bb/ee</span><br><span class="line">456456 </span><br><span class="line">123123 </span><br><span class="line">[root@localhost 111]#</span><br></pre></td></tr></table></figure></p><p><strong>more</strong> 也是用来查看一个文件的内容。当文件内容太多，一屏幕不能占下，而你用cat肯定是看不前面的内容的，那么使用more就可以解决这个问题了。当看完一屏后按空格键继续看下一屏。但看完所有内容后就会退出。如果想提前退出，只需按q键即可。</p><p><strong>less</strong> 作用跟more一样，但比more好在可以上翻，下翻。空格键同样可以翻页，而按”j”键可以向下移动（按一下就向下移动一行），按”k”键向上移动。在使用more和less查看某个文件时，你可以按一下”/” 键，然后输入一个word回车，这样就可以查找这个word了。如果是多个该word可以按”n”键显示下一个。另外你也可以不按”/”而是按”?”后边同样跟word来搜索这个word，唯一不同的是，”/”是在当前行向下搜索，而”?”是在当前行向上搜索。</p><p><strong>head</strong> head后直接跟文件名，则显示文件的前十行。如果加 –n 选项则显示文件前n行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 111]# head /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">[root@localhost 111]# head -n 5 /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">[root@localhost 111]#</span><br></pre></td></tr></table></figure></p><p><strong>tail</strong> 和head一样，后面直接跟文件名，则显示文件最后十行。如果加-n 选项则显示文件最后n行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 111]# tail /etc/passwd</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd:x:999:998:User for polkitd:/:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">jgh:x:1000:1000:jgh:/home/jgh:/bin/bash</span><br><span class="line">[root@localhost 111]# tail -n 2 /etc/passwd</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">jgh:x:1000:1000:jgh:/home/jgh:/bin/bash</span><br><span class="line">[root@localhost 111]#</span><br></pre></td></tr></table></figure></p><p>-f 动态显示文件的最后十行，如果文件是不断增加的，则用-f 选项。如：tail -f /var/log/messages</p><h2 id="环境变量PATH"><a href="#环境变量PATH" class="headerlink" title="环境变量PATH"></a>环境变量PATH</h2><p>上边提到了alias，也提到了绝对路径的/user/bin/rm ，然后你意识到没有，为什么我们输入很多命令时是直接打出了命令，而没有去使用这些命令的绝对路径？这是因为环境变量PATH在起作用了。请输入 echo $PATH，这里的echo其实就是打印的意思，而PATH前面的$表示后面接的是变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[root@localhost ~]# echo hello</span><br><span class="line">hello</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p>因为/usr/bin 在PATH的设定中，所以自然就可以找到ls了。如果你将ls移动到/root底下的话，然后你自己本身也在/root底下，但是当你执行ls的时候，他就是不理你？怎么办？这是因为PATH没有/root 这个目录，而你又将ls移动到/root底下了，自然系统就找不到可执行文件了，因此就会告诉你， command not found！那么该怎么克服这种问题呢？</p><p>有两个方法，一种方法是直接将/root的路径加入PATH当中！可以使用以下命令： 　<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=”$PATH”:/root</span><br></pre></td></tr></table></figure></p><p>另一种方式则是使用完整档名，亦即直接使用相对或绝对路径来执行，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/root/ls</span><br><span class="line">./ls</span><br></pre></td></tr></table></figure></p><h2 id="文件的所属主以及所属组"><a href="#文件的所属主以及所属组" class="headerlink" title="文件的所属主以及所属组"></a>文件的所属主以及所属组</h2><p>一个Linux目录或者文件，都会有一个所属主和所属组。所属主，即文件的拥有者，而所属组，即该文件所属主所在的一个组。Linux这样设置文件属性的目的是为了文件的安全。例如，test文件的所属主是user0 而test1文件的所属主是user1，那么user1是不能查看test文件的，相应的user0也不能查看test1文件。然后有这样一个应用，我想创建一个文件同时让user0和user1来查看怎么办呢？</p><p>这时“所属组”就派上用场了。即，创建一个群组users，让user0和user1同属于users组，然后建立一个文件test2，且其所属组为users，那么user0和user1都可以访问test2文件。</p><p>Linux文件属性不仅规定了所属主和所属组，还规定了所属主（user）、所属组(group)以及其他用户（others）对该文件的权限。你可以通过ls -l 来查看这些属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /tmp/test/</span><br><span class="line">[root@localhost test]# ls -l</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 3 root root 16 5月  20 13:39 111</span><br><span class="line">drwxr-xr-x. 2 root root 28 5月  20 13:23 123</span><br><span class="line">-rw-r--r--. 1 root root  0 5月  20 12:48 test</span><br><span class="line">lrwxrwxrwx. 1 root root  4 5月  20 12:49 test1 -&gt; test</span><br><span class="line">-rw-r--r--. 1 root root  0 5月  20 13:16 test2</span><br><span class="line">lrwxrwxrwx. 1 root root  4 5月  20 12:50 test3 -&gt; test</span><br></pre></td></tr></table></figure></p><h2 id="Linux文件属性"><a href="#Linux文件属性" class="headerlink" title="Linux文件属性"></a>Linux文件属性</h2><p>上面用ls –l查看当前目录下的文件时，共显示了9列内容（用空格划分列），都代表了什么含义呢？</p><p>第1列，包含的东西有该文件类型和所属主、所属组以及其他用户对该文件的权限。第一列共10位。其中第一位用来描述该文件的类型。我们看到的类型有”d”, “-“，”l” ，其实除了这两种外还有“b”, “c”,”s”等。</p><p>“d” 表示该文件为目录；</p><p>“-“ 表示该文件为普通文件；</p><p>“l” 表示该文件为连接文件（Linux file），上边提到的软连接即为该类型；</p><p>“b” 表示该文件为块设备文件，比如磁盘分区</p><p>“c” 表示该文件为串行端口设备，例如键盘、鼠标。</p><p>“s” 表示该文件为套接字文件（socket），用于进程间通信。</p><p>后边的9位，每三个为一组。均为rwx三个参数的组合。其中r代表可读，w代表可写，x代表可执行。前三位为所属主（user）的权限，中间三位为所属组（group）的权限，最后三位为其他非本群组（others）的权限。下面拿一个具体的例子来述说一下。</p><p>一个文件的属性为-rwxr-xr– ，它代表的意思是，该文件为普通文件，文件拥有者可读可写可执行，文件所属组对其可读不可写可执行，其他用户对其只可读。</p><p>对于一个目录来讲，打开这个目录即为执行这个目录，所以任何一个目录必须要有x权限才能打开并查看该目录。例如一个目录的属性为drwxr–r– 其所属主为root，那么除了root外的其他用户是不能打开这个目录的。</p><p>第2列，表示为连接占用的节点（inode），若为目录时，通常与该目录地下还有多少目录有关系，关于连接（link）在以后详细介绍。</p><p>第3列，表示该文件的所属主。</p><p>第4列，表示该文件的所属组。</p><p>第5列，表示该文件的大小。</p><p>第6列、第7列和第8列为该文件的创建日期或者最近的修改日期，分别为月份日期以及时间。</p><p>第9列，文件名。如果前面有一个. 则表示该文件为隐藏文件。</p><h2 id="更改文件的权限"><a href="#更改文件的权限" class="headerlink" title="更改文件的权限"></a>更改文件的权限</h2><p>更改文件的权限，也就是更改所属主、所属组以及他们对应的读写执行权限。</p><h3 id="更改所属组"><a href="#更改所属组" class="headerlink" title="更改所属组"></a>更改所属组</h3><p><strong>chgrp</strong> chgrp其实就是change group的缩写。</p><p>语法：chgrp [组名] [文件名]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /tmp/test</span><br><span class="line">[root@localhost test]# ls</span><br><span class="line">111  123  test  test1  test2  test3</span><br><span class="line">[root@localhost test]# groupadd testgroup</span><br><span class="line">[root@localhost test]# ls -l test</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  20 12:48 test</span><br><span class="line">[root@localhost test]# chgrp testgroup test</span><br><span class="line">[root@localhost test]# ls -l test</span><br><span class="line">-rw-r--r--. 1 root testgroup 0 5月  20 12:48 test</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>这里用到了groupadd命令，其含义即增加一个用户组。该命令在以后会做详细介绍，现在只需要知道它是用来增加用户组的即可。</p><h3 id="更改文件的所属主"><a href="#更改文件的所属主" class="headerlink" title="更改文件的所属主"></a>更改文件的所属主</h3><p><strong>chown</strong> chown其实就是change owner的缩写。<br>语法：</p><ul><li><p>chown [ -R ] 账户名 文件名</p></li><li><p>chown [ -R ] 账户名：组名 文件名</p></li></ul><p>这里的-R选项只作用于目录，作用是级联更改，即不仅更改当前目录，连目录里的目录或者文件全部更改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# useradd user1</span><br><span class="line">[root@localhost test]# ls -ld 111</span><br><span class="line">drwxr-xr-x. 3 root root 16 5月  20 13:39 111</span><br><span class="line">[root@localhost test]# touch 111/test2</span><br><span class="line">[root@localhost test]# ls -l 111</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 3 root root 26 5月  20 13:45 bb</span><br><span class="line">-rw-r--r--. 1 root root  0 5月  20 17:15 test2</span><br><span class="line">[root@localhost test]# chown user1 111</span><br><span class="line">[root@localhost test]# ls -ld 111</span><br><span class="line">drwxr-xr-x. 3 user1 root 29 5月  20 17:15 111</span><br><span class="line">[root@localhost test]# ls -l 111</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 3 root root 26 5月  20 13:45 bb</span><br><span class="line">-rw-r--r--. 1 root root  0 5月  20 17:15 test2</span><br><span class="line">[root@localhost test]# chown -R user1:testgroup 111</span><br><span class="line">[root@localhost test]# ls -ld 111</span><br><span class="line">drwxr-xr-x. 3 user1 testgroup 29 5月  20 17:15 111</span><br><span class="line">[root@localhost test]# ls -l 111</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 3 user1 testgroup 26 5月  20 13:45 bb</span><br><span class="line">-rw-r--r--. 1 user1 testgroup  0 5月  20 17:15 test2</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>useradd是增加一个账户，以后会详细介绍。在111目录下创建一个普通文件test2，因为是以root的身份创建的目录和文件，所以所属主以及所属组都是root。chown user1 111这使111的目录所属主由root变为了user1 ，然后111目录下的test2文件所属主以及所属组还是root。接着chown –R user1:testgroup 111这样把111连同111目录下的test2 的所属主以及所属组都改变了。</p><h3 id="改变用户对文件的读写执行权限"><a href="#改变用户对文件的读写执行权限" class="headerlink" title="改变用户对文件的读写执行权限"></a>改变用户对文件的读写执行权限</h3><p><strong>chmod</strong> </p><p>语法： chmod [-R] xyz 文件名 （这里的xyz，表示数字）</p><p>-R 选项作用同chown，级联更改。</p><p>在Linux中为了方便更改这些权限，Linux使用数字去代替rwx，具体规则为r:4 w:2 x:1 -:0 举个例子，-rwxrwx—用数字表示就是770，具体是这样来的：</p><p>rwx = 4+2+1=7; rwx= 4+2+1=7; — = 0+0+0=0</p><p>值得提一下的是，在Linux系统中，默认一个目录的权限为755，而一个文件的默认权限为644。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# ls -dl 111</span><br><span class="line">drwxr-xr-x. 3 user1 testgroup 29 5月  20 17:15 111</span><br><span class="line">[root@localhost test]# ls -l 111</span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 3 user1 testgroup 26 5月  20 13:45 bb</span><br><span class="line">-rw-r--r--. 1 user1 testgroup  0 5月  20 17:15 test2</span><br><span class="line">[root@localhost test]# chmod 750 111</span><br><span class="line">[root@localhost test]# ls -ld 111</span><br><span class="line">drwxr-x---. 3 user1 testgroup 29 5月  20 17:15 111</span><br><span class="line">[root@localhost test]# ls -l 111/test2</span><br><span class="line">-rw-r--r--. 1 user1 testgroup 0 5月  20 17:15 111/test2</span><br><span class="line">[root@localhost test]# chmod -R 700 111</span><br><span class="line">[root@localhost test]# ls -ld 111</span><br><span class="line">drwx------. 3 user1 testgroup 29 5月  20 17:15 111</span><br><span class="line">[root@localhost test]# ls -l 111</span><br><span class="line">总用量 0</span><br><span class="line">drwx------. 3 user1 testgroup 26 5月  20 13:45 bb</span><br><span class="line">-rwx------. 1 user1 testgroup  0 5月  20 17:15 test2</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>如果你创建了一个目录，而该目录不想让其他人看到内容，则只需设置成 rwxr—– (740) 即可。</p><p>chmod还支持使用rwx的方式来设置权限。从之前的介绍中我们可以发现，基本上就九个属性分别是(1)user (2)group (3)others 三群啦。那么我们就可以藉由 u, g, o 来代表三群的属性！此外， a则代表all, 亦即全部的三群。那么读写的属性就可以写成了 r, w, x！也就是可以使用底下的方式来看： </p><p><img src="http://p6v6hsmcp.bkt.clouddn.com/6_86.png" alt="chmod" style="width:100%"><br>现在我想把一个文件设置成这样的权限 rwxr-xr-x (755)，使用这种方式改变权限的命令为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# chmod u=rwx,go=rx 111/test2</span><br><span class="line">[root@localhost test]# ls -l 111/test2</span><br><span class="line">-rwxr-xr-x. 1 user1 testgroup 0 5月  20 17:15 111/test2</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>另外还可以针对u, g, o, a增加或者减少某个权限（读，写，执行），例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# chmod u-x 111/test2</span><br><span class="line">[root@localhost test]# ls -l 111/test2</span><br><span class="line">-rw-r-xr-x. 1 user1 testgroup 0 5月  20 17:15 111/test2</span><br><span class="line">[root@localhost test]# chmod a-x 111/test2</span><br><span class="line">[root@localhost test]# ls -l 111/test2</span><br><span class="line">-rw-r--r--. 1 user1 testgroup 0 5月  20 17:15 111/test2</span><br><span class="line">[root@localhost test]# chmod u+x 111/test2</span><br><span class="line">[root@localhost test]# ls -l 111/test2</span><br><span class="line">-rwxr--r--. 1 user1 testgroup 0 5月  20 17:15 111/test2</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p><strong>umask</strong> 上边也提到了默认情况下，目录权限值为755，普通文件权限值为644。那么这个值是由谁规定呢？追究其原因就涉及到了umask。</p><p>umask语法： umask xxx （这里的xxx代表三个数字）</p><p>查看umask值只要输入umask然后回车。 umask预设是0022，其代表什么含义？先看一下下面的规则：</p><p>1）若用户建立为普通文件，则预设“没有可执行权限”，只有rw两个权限。最大为666（-rw-rw-rw-）</p><p>2）若用户建立为目录，则预设所有权限均开放，即777（drwxrwxrwx）</p><p>umask数值代表的含义为，上边两条规则中的默认值（文件为666，目录为777）需要减掉的权限。所以目录的权限为(rwxrwxrwx) – (—-w–w-) = (rwxr-xr-x)，普通文件的权限为(rw-rw-rw-) – (—-w–w-) = (rw-r–r–)。umask的值是可以自定义的，比如设定umask为002，你再创建目录或者文件时，默认权限分别为(rwxrwxrwx) – (——-w-) = (rwxrwxr-x)和(rw-rw-rw-) – (——-w-) = (rw-rw-r–)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# umask</span><br><span class="line">0022</span><br><span class="line">[root@localhost test]# umask 002</span><br><span class="line">[root@localhost test]# mkdir test4</span><br><span class="line">[root@localhost test]# ls -ld test4</span><br><span class="line">drwxrwxr-x. 2 root root 6 5月  20 20:55 test4</span><br><span class="line">[root@localhost test]# touch test5</span><br><span class="line">[root@localhost test]# ls -l test5</span><br><span class="line">-rw-rw-r--. 1 root root 0 5月  20 20:56 test5</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>umask可以在/etc/bashrc里面更改，预设情况下，root的umask为022，而一般使用者则为002，因为可写的权限非常重要，因此预设会去掉写权限。</p><h3 id="修改文件的特殊属性"><a href="#修改文件的特殊属性" class="headerlink" title="修改文件的特殊属性"></a>修改文件的特殊属性</h3><p><strong>chattr</strong> chattr其实就是change attribute的缩写。</p><p>语法： chattr [+-=][ASaci] 文件或者目录名</p><p>+-= ：分别为增加、减少、设定</p><p>A：增加该属性后，文件或目录的atime将不可被修改；</p><p>S：增加该属性后，会将数据同步写入磁盘中；</p><p>a：增加该属性后，只能追加不能删除，非root用户不能设定该属性；</p><p>c：自动压缩该文件，读取时会自动解压；</p><p>i：增加后，使文件不能被删除、重命名、设定连接、写入、新增数据；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# chattr +i test4</span><br><span class="line">[root@localhost test]# touch test4/123</span><br><span class="line">touch: 无法创建&quot;test4/123&quot;: 权限不够</span><br><span class="line">[root@localhost test]# chattr -i test4</span><br><span class="line">[root@localhost test]# touch test4/123</span><br><span class="line">[root@localhost test]# ls test4</span><br><span class="line">123</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>增加i属性后不能在该目录中建立文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# touch test4/456</span><br><span class="line">[root@localhost test]# ls test4</span><br><span class="line">123  456</span><br><span class="line">[root@localhost test]# chattr +a test4</span><br><span class="line">[root@localhost test]# rm test4/456</span><br><span class="line">rm：是否删除普通空文件 &quot;test4/456&quot;？y</span><br><span class="line">rm: 无法删除&quot;test4/456&quot;: 不允许的操作</span><br><span class="line">[root@localhost test]# touch test4/789</span><br><span class="line">[root@localhost test]# ls test4</span><br><span class="line">123  456  789</span><br><span class="line">[root@localhost test]# chattr -a test4</span><br><span class="line">[root@localhost test]# ls test4</span><br><span class="line">123  456  789</span><br><span class="line">[root@localhost test]# rm test4/456</span><br><span class="line">rm：是否删除普通空文件 &quot;test4/456&quot;？y</span><br><span class="line">[root@localhost test]# ls test4</span><br><span class="line">123  789</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>增加a属性后，只能追加不能删除。</p><h3 id="列出文件-目录的特殊属性"><a href="#列出文件-目录的特殊属性" class="headerlink" title="列出文件/目录的特殊属性"></a>列出文件/目录的特殊属性</h3><p><strong>lsattr</strong></p><p>语法： lsattr [-aR] [文件/目录名]</p><p>-a：类似与ls的-a选项，即连同隐藏文件一同列出；</p><p>-R：连同子目录的数据一同列出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# lsattr -a test4</span><br><span class="line">---------------- test4/.</span><br><span class="line">---------------- test4/..</span><br><span class="line">---------------- test4/123</span><br><span class="line">---------------- test4/789</span><br><span class="line">[root@localhost test]# mkdir test4/test</span><br><span class="line">[root@localhost test]# touch test4/test/aa</span><br><span class="line">[root@localhost test]# lsattr -R test4</span><br><span class="line">---------------- test4/123</span><br><span class="line">---------------- test4/789</span><br><span class="line">---------------- test4/test</span><br><span class="line"></span><br><span class="line">test4/test:</span><br><span class="line">---------------- test4/test/aa</span><br><span class="line"></span><br><span class="line">[root@localhost test]# lsattr test4</span><br><span class="line">---------------- test4/123</span><br><span class="line">---------------- test4/789</span><br><span class="line">---------------- test4/test</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><h2 id="在Linux下搜索一个文件"><a href="#在Linux下搜索一个文件" class="headerlink" title="在Linux下搜索一个文件"></a>在Linux下搜索一个文件</h2><p>在Windows下有一个搜索工具，可以让我们很快的找到一个文件，这是很有用的。然而在linux下搜索功能更加强大。</p><p><strong>which</strong> 用来查找可执行文件的绝对路径。</p><p>在前面已经多次用到该命令，需要注意的一点是，which只能用来查找PATH环境变量中出现的路径下的可执行文件。这个命令用的也是蛮多的，有时候我们不知道某个命令的绝对路径，which一下很容易就知道了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# which ls</span><br><span class="line">alias ls=&apos;ls --color=auto&apos;</span><br><span class="line">        /usr/bin/ls</span><br><span class="line">[root@localhost test]# which cd</span><br><span class="line">/usr/bin/cd</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>当查找的文件在PATH变量中并没有时，就会报错。</p><p><strong>whereis</strong> 通过预先生成的一个文件列表库去查找跟给出的文件名相关的文件。</p><p>语法： whereis [-bmsu] [文件名称]</p><p>-b：只找binary 文件</p><p>-m：只找在说明文件manual路径下的文件</p><p>-s：只找source来源文件</p><p>-u：没有说明档的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# whereis passwd</span><br><span class="line">passwd: /usr/bin/passwd /etc/passwd /usr/share/man/man1/passwd.1.gz</span><br><span class="line">[root@localhost test]# where -b passwd</span><br><span class="line">-bash: where: 未找到命令</span><br><span class="line">[root@localhost test]# whereis -b passwd</span><br><span class="line">passwd: /usr/bin/passwd /etc/passwd</span><br><span class="line">[root@localhost test]# whereis -m passwd</span><br><span class="line">passwd: /usr/share/man/man1/passwd.1.gz</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>locate 类似于whereis，也是通过查找预先生成的文件列表库来告诉用户要查找的文件在哪里。后边直接跟文件名。如果你的Linux没有这个命令，请安装软件包mlocate，这个软件包在你的系统安装盘里，后缀名是RPM，随后介绍的find命令会告诉你如何查找这个包。如果你装的CentOS你可以使用这个命令来安装 yum install –y mlocate 。 前提是你的CentOS能连互联网。至于yum这个命令如何使用，到后续章节你自然会明白。如果你刚装上这个命令，初次使用会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# locate passwd</span><br><span class="line">-bash: locate: 未找到命令</span><br><span class="line">[root@localhost test]#  yum install –y mlocate</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.sohu.com</span><br><span class="line"> * extras: mirrors.163.com</span><br><span class="line"> * updates: mirrors.163.com</span><br><span class="line">正在解决依赖关系</span><br><span class="line">--&gt; 正在检查事务</span><br><span class="line">---&gt; 软件包 mlocate.x86_64.0.0.26-8.el7 将被 安装</span><br><span class="line">--&gt; 解决依赖关系完成</span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line">=======================================================================================================================================================================</span><br><span class="line"> Package                                 架构                                   版本                                        源                                    大小</span><br><span class="line">=======================================================================================================================================================================</span><br><span class="line">正在安装:</span><br><span class="line"> mlocate                                 x86_64                                 0.26-8.el7                                  base                                 113 k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">=======================================================================================================================================================================</span><br><span class="line">安装  1 软件包</span><br><span class="line"></span><br><span class="line">总下载量：113 k</span><br><span class="line">安装大小：379 k</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">mlocate-0.26-8.el7.x86_64.rpm                                                                                                                   | 113 kB  00:00:01     </span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  正在安装    : mlocate-0.26-8.el7.x86_64                                                                                                                          1/1 </span><br><span class="line">  验证中      : mlocate-0.26-8.el7.x86_64                                                                                                                          1/1 </span><br><span class="line"></span><br><span class="line">已安装:</span><br><span class="line">  mlocate.x86_64 0:0.26-8.el7                                                                                                                                          </span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# locate passwd</span><br><span class="line">locate: 无法执行 stat () `/var/lib/mlocate/mlocate.db&apos;: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>这是因为系统还没有生成那个文件列表库。你可以使用updatedb命令立即生成（更新）这个库。如果你的服务器上正跑着重要的业务，那么你最好不要去运行这个命令，因为一旦运行，服务器的压力会变大。这个数据库默认情况下每周更新一次。所以你用locate命令去搜索一个文件，正好是在两次更新时间段内，那你肯定是得不到结果的。你可以到/etc/updated.conf去配置这个数据库生成（更新）的规则。locate命令用的也并不多，所以你只要明白有这么一个东西即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# updatedb</span><br><span class="line">[root@localhost test]# locate passwd</span><br><span class="line">/etc/passwd</span><br><span class="line">/etc/passwd-</span><br><span class="line">/etc/pam.d/passwd</span><br><span class="line">/etc/security/opasswd</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/grub2-mkpasswd-pbkdf2</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/lib/firewalld/services/kpasswd.xml</span><br><span class="line">/usr/lib64/security/pam_unix_passwd.so</span><br><span class="line">/usr/sbin/chpasswd</span><br><span class="line">/usr/sbin/lpasswd</span><br><span class="line">/usr/sbin/saslpasswd2</span><br><span class="line">/usr/share/awk/passwd.awk</span><br><span class="line">/usr/share/doc/passwd-0.79</span><br><span class="line">/usr/share/doc/passwd-0.79/AUTHORS</span><br><span class="line">/usr/share/doc/passwd-0.79/COPYING</span><br><span class="line">/usr/share/doc/passwd-0.79/ChangeLog</span><br><span class="line">/usr/share/doc/passwd-0.79/NEWS</span><br><span class="line">/usr/share/locale/ar/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/as/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ast/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/bg/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/bn/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/bn_IN/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/bs/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ca/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/cs/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/cy/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/da/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/de/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/el/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/en_GB/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/es/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/et/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/eu/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/fa/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/fi/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/fr/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/gl/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/gu/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/he/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/hi/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/hr/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/hu/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/hy/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/id/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/is/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/it/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ja/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ka/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/kn/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ko/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ku/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/lo/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/mk/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ml/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/mr/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ms/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/my/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/nb/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/nds/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/nl/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/nn/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/or/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/pa/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/pl/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/pt/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/pt_BR/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ro/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ru/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/si/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/sk/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/sl/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/sq/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/sr/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/sr@latin/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/sv/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ta/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/te/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/tr/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/uk/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/ur/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/vi/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/wa/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/zh_CN/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/locale/zh_TW/LC_MESSAGES/passwd.mo</span><br><span class="line">/usr/share/man/cs/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/de/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/de/man8/chpasswd.8.gz</span><br><span class="line">/usr/share/man/fr/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/fr/man8/chpasswd.8.gz</span><br><span class="line">/usr/share/man/hu/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/it/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/it/man8/chpasswd.8.gz</span><br><span class="line">/usr/share/man/ja/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/ja/man1/passwd.1.gz</span><br><span class="line">/usr/share/man/ja/man8/chpasswd.8.gz</span><br><span class="line">/usr/share/man/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/man1/grub2-mkpasswd-pbkdf2.1.gz</span><br><span class="line">/usr/share/man/man1/lpasswd.1.gz</span><br><span class="line">/usr/share/man/man1/passwd.1.gz</span><br><span class="line">/usr/share/man/man1/sslpasswd.1ssl.gz</span><br><span class="line">/usr/share/man/man8/chpasswd.8.gz</span><br><span class="line">/usr/share/man/pt_BR/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/ru/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/ru/man8/chpasswd.8.gz</span><br><span class="line">/usr/share/man/zh_CN/man1/gpasswd.1.gz</span><br><span class="line">/usr/share/man/zh_CN/man8/chpasswd.8.gz</span><br><span class="line">/usr/share/man/zh_TW/man8/chpasswd.8.gz</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p><strong>find</strong> 这个搜索工具是用的最多的一个，所以请你务必要熟悉它。</p><p>语法： find [路径] [参数] </p><p>下面介绍几个常用的参数:</p><p>-atime +n ：访问或执行时间大于n天的文件</p><p>-ctime +n ：写入、更改inode属性（例如更改所有者、权限或者连接）时间大于n天的文件</p><p>-mtime +n ：写入时间大于n天的文件</p><p>文件的Access time，atime是在读取文件或者执行文件时更改的。<br>文件的Modified time，mtime是在写入文件时随文件内容的更改而更改的。<br>文件的Create time，ctime是在写入文件、更改所有者、权限或链接设置时随Inode的内容更改而更改的。<br>因此，更改文件的内容即会更改mtime和ctime，但是文件的ctime可能会在mtime未发生任何变化时更改，例如，更改了文件的权限，但是文件内容没有变化。 如何获得一个文件的atime mtime 以及ctime ？</p><p>ls -l 命令可用来列出文件的atime、ctime 和mtime。</p><p>ls -lc filename         列出文件的 ctime</p><p>ls -lu filename         列出文件的 atime</p><p>ls -l filename          列出文件的 mtime    </p><p>atime不一定在访问文件之后被修改，因为：使用ext3文件系统的时候，如果在mount的时候使用了noatime参数那么就不会更新atime的信息。而这是加了noatime取消了, 不代表真实情況。反正, 这三个time stamp都放在inode中。若 mtime, atime修改inode就一定會改, 既然inode改了, 那ctime也就跟著要改了。</p><p>继续讲find常用的参数。</p><p>-name filename 直接查找该文件名的文件，这个使用最多了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# ls</span><br><span class="line">111  123  test  test1  test2  test3  test4  test5</span><br><span class="line">[root@localhost test]# find /tmp/test -name test</span><br><span class="line">/tmp/test</span><br><span class="line">/tmp/test/test</span><br><span class="line">/tmp/test/test4/test</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><p>-type：通过文件类型查找。文件类型在前面部分已经简单介绍过，相信你已经大体上了解了。type包含了f,b,c,d,l, s等等。后续的内容还会介绍文件类型的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# mkdir file1</span><br><span class="line">[root@localhost test]# mkdir file1/file2</span><br><span class="line">[root@localhost test]# touch file1/file3</span><br><span class="line">[root@localhost test]# touch file1/file2/file4</span><br><span class="line">[root@localhost test]# find ./file1 -type d</span><br><span class="line">./file1</span><br><span class="line">./file1/file2</span><br><span class="line">[root@localhost test]# find ./file1 -type f</span><br><span class="line">./file1/file2/file4</span><br><span class="line">./file1/file3</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure></p><h2 id="Linux文件类型"><a href="#Linux文件类型" class="headerlink" title="Linux文件类型"></a>Linux文件类型</h2><p>在前面的内容中简单介绍了普通文件(-)，目录(d)等，在Linux文件系统中，主要有以下几种类型的文件。</p><ol><li><p>正规文件（regular file）：就是一般类型的文件，当用ls –l查看某个目录时，第一个属性为“-”的文件就是正规文件，或者叫普通文件。正规文件又可分成纯文字文件（ascii）和二进制文件（binary）。纯文本文件是可以通过cat, more, less等工具直接查看内容的，而二进制文件并不能。例如我们用的命令/usr/bin/ls这就是一个二进制文件。</p></li><li><p>目录（directory）：这个很容易理解，就是目录，跟Windows下的文件夹一个意思，只不过在Linux中我们不叫文件夹，而是叫做目录。ls –l查看第一个属性为“d”。</p></li><li><p>连接档（link）：ls –l查看第一个属性为“l”，类似Windows下的快捷方式。这种文件在Linux中很常见，而且在日常的系统运维工作中用的很多，所以你要特意留意一下这种类型的文件。在后面还会有介绍。</p></li><li><p>设备档（device）：与系统周边相关的一些档案，通常都集中在/dev这个目录之下！通常又分为两种：区块(block) 设备档 ：就是一些储存数据，以提供系统存取的接口设备，简单的说就是硬盘啦！例如你的一号硬盘的代码是/dev/hda1 等等的档案啦！第一个属性为“b”；字符(character)设备档：亦即是一些串行端口的接口设备，例如键盘、鼠标等等！第一个属性为“c”。</p></li></ol><h2 id="Linux文件后缀名"><a href="#Linux文件后缀名" class="headerlink" title="Linux文件后缀名"></a>Linux文件后缀名</h2><p>在Linux系统中，文件的后缀名并没有具体意义，也就是说，你加或者不加，都无所谓。但是为了容易区分，Linux爱好者们都习惯给文件加一个后缀名，这样当用户看到这个文件名时就会很快想到它到底是一个什么文件。例如1.sh,2.tar.gz,my.cnf,test.zip等等，如果你首次接触这些文件，你也许会感到很晕，没有关系，随着学习的深入，你就会逐渐的了解这些文件了。列举的几个文件名中1.sh代表它是一个shell script ，2.tar.gz代表它是一个压缩包，my.cnf代表它是一个配置文件，test.zip代表它是一个压缩文件。</p><p>另外需要你知道的是，早期Unix系统文件名最多允许14个字符，而新的Unix或者Linux系统中，文件名最长可以到达 256个字符！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/linux.jpg&quot; alt=&quot;Linux&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SecureCRT的使用</title>
    <link href="https://jingguanghui.github.io/2018/05/17/SecureCRT/"/>
    <id>https://jingguanghui.github.io/2018/05/17/SecureCRT/</id>
    <published>2018-05-17T15:26:20.000Z</published>
    <updated>2018-05-17T15:53:12.532Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/pexels-photo.jpg" alt="SecureCRT" style="width:100%"><br><a id="more"></a></p><h2 id="SecureCRT简介"><a href="#SecureCRT简介" class="headerlink" title="SecureCRT简介"></a>SecureCRT简介</h2><p>SecureCRT是一款支持SSH（SSH1和SSH2）的终端仿真程序，简单地说是Windows下登录UNIX或Linux服务器主机的软件。</p><h2 id="解决SecureCRT中文乱码"><a href="#解决SecureCRT中文乱码" class="headerlink" title="解决SecureCRT中文乱码"></a>解决SecureCRT中文乱码</h2><p>本地windows机器。修改SecureCRT的设置。找到“选项”-&gt;“会话选项”-&gt;“外观”：</p><ul><li>字符编码设置为utf-8。</li><li>字体设置，选择中文字体，例如新宋体。</li><li>重新启动SecureCRT即可</li></ul><h2 id="发送文件到Linux系统"><a href="#发送文件到Linux系统" class="headerlink" title="发送文件到Linux系统"></a>发送文件到Linux系统</h2><ol><li>右键单击SecureCRT控制台左上角的ip地址</li><li>找到“连接SFTP标签页(S)”并单击，进入SFTP标签页</li><li>可以使用help命令查看SFTP下面所有的功能</li><li>使用命令lcd进入客户端要发送给服务器所在文件的文件夹中，例如：lcd D:\software</li><li>使用命令lls可查看该文件下所有的文件，例如：lls D:\software</li><li>使用命令cd进入服务器接受文件的文件中。例如： cd /usr/jdk</li><li>使用命令put 加上要发送的文件名即可发送文件到服务器，例如：put 1.txt</li><li>使用命令ls查看服务器是否收到该文件</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/pexels-photo.jpg&quot; alt=&quot;SecureCRT&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
      <category term="SecureCRT" scheme="https://jingguanghui.github.io/tags/SecureCRT/"/>
    
  </entry>
  
  <entry>
    <title>Centos7中查看本机ip地址</title>
    <link href="https://jingguanghui.github.io/2018/05/17/CentOS_1/"/>
    <id>https://jingguanghui.github.io/2018/05/17/CentOS_1/</id>
    <published>2018-05-17T13:56:20.000Z</published>
    <updated>2018-05-17T15:15:51.186Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/pexels-photo-930530.jpeg" alt="CentOS" style="width:100%"><br><a id="more"></a><br>可以输入以下命令查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>如果输入ifconfig，出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: ifconfig: command not found</span><br></pre></td></tr></table></figure></p><p>说明没有ifconfig，可以输入以下命令安装net-tools package<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install net-tools</span><br></pre></td></tr></table></figure></p><p>安装完成后，则可以用ifconfig命令来查询ip地址。</p><p>输入命令会出现3个条目，CentOS的ip地址是ens33条目中的inet值。<br><img src="http://p6v6hsmcp.bkt.clouddn.com/1497185138263086154.jpg" alt="CentOS" style="width:100%"><br>发现ens33没有inet这个属性，那么就没法通过ip地址做远程连接了。<br>接着来输入以下命令来查看ens33网卡的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>vi是Linux内置的文本编辑器命令，打开文件的意思。<br><img src="http://p6v6hsmcp.bkt.clouddn.com/1497185328169099657.jpg" alt="CentOS" style="width:100%"></p><p>从配置清单中可以发现CentOS7默认是不启动网卡的（ONBOOT=no）。<br>把这一项改为yes（ONBOOT=yes）,如下图所示：</p><p><img src="http://p6v6hsmcp.bkt.clouddn.com/1497185415060083062.jpg" alt="CentOS" style="width:100%"></p><div class="note warning"><p>vi打开时是处于只读状态的，可以按insert键或者A使其处于编辑状态。</p></div><p>修改完成后，按Esc退出，然后输入命令:wq，再按Enter即可。</p><p><div class="note info"><p>:wq是保存然后退出的意思；:q!是不保存直接退出的意思</p></div><br>最后输入以下命令重启网络服务即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network restart</span><br></pre></td></tr></table></figure><p>然后我们再输入ip attr或者ifconfig,即可看到ip地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ip attr</span><br><span class="line">Object &quot;attr&quot; is unknown, try &quot;ip help&quot;.</span><br><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:6f:51:d5 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.43.137/24 brd 192.168.43.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 3198sec preferred_lft 3198sec</span><br><span class="line">    inet6 fe80::dc72:7667:d658:eff6/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></p><p>这里的192.168.43.137即是我们需要的ip地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/pexels-photo-930530.jpeg&quot; alt=&quot;CentOS&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://jingguanghui.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门（四）初步进入	Linux世界</title>
    <link href="https://jingguanghui.github.io/2018/05/17/Linux_4/"/>
    <id>https://jingguanghui.github.io/2018/05/17/Linux_4/</id>
    <published>2018-05-17T13:03:20.000Z</published>
    <updated>2018-05-19T09:19:55.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/linux.jpg" alt="Linux" style="width:100%"><br><a id="more"></a></p><h2 id="Linux的启动过程"><a href="#Linux的启动过程" class="headerlink" title="Linux的启动过程"></a>Linux的启动过程</h2><p>Linux的启动其实和Windows的启动过程很类似，不过Windows我们是无法看到启动信息的，而Linux启动时我们会看到许多启动信息，例如某个服务是否启动。</p><p>Linux系统的启动过程大体上可分为五部分：</p><ol><li>内核的引导</li><li>运行init</li><li>系统初始化</li><li>建立终端</li><li>用户登录系统</li></ol><h2 id="学会使用快捷键"><a href="#学会使用快捷键" class="headerlink" title="学会使用快捷键"></a>学会使用快捷键</h2><p>Ctrl+C：这个是用来终止当前命令的快捷键，当然你也可以输入一大串字符，不想让它运行直接Ctrl + C，光标就会跳入下一行。 </p><p>Tab：这个键是最有用的键了，因为当你打一个命令打一半时，它会帮你补全的。不光是命令，当你打一个目录时，同样可以补全，不信你试试。</p><p>Ctrl+D：退出当前终端，同样你也可以输入exit。</p><p>Ctrl+Z：暂停当前进程，比如你正运行一个命令，突然觉得有点问题想暂停一下，就可以使用这个快捷键。暂停后，可以使用fg恢复它。</p><p>Ctrl+L：清屏，使光标移动到第一行，同样你也可以输入clear。</p><h2 id="查询帮助文档——man"><a href="#查询帮助文档——man" class="headerlink" title="查询帮助文档——man"></a>查询帮助文档——man</h2><p><div class="note info"><p>有问题找男人——man</p></div><br>这个man通常是用来看一个命令的帮助文档的。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# man ls</span><br><span class="line">LS(1)                            User Commands                           LS(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ls - list directory contents</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ls [OPTION]... [FILE]...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       List  information  about  the FILEs (the current directory by default).</span><br><span class="line">       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci鈥[m</span><br><span class="line">       fied.</span><br><span class="line"></span><br><span class="line">       Mandatory  arguments  to  long  options are mandatory for short options</span><br><span class="line">       too.</span><br><span class="line"></span><br><span class="line">       -a, --all</span><br><span class="line">              do not ignore entries starting with .</span><br><span class="line"></span><br><span class="line">       -A, --almost-all</span><br><span class="line">              do not list implied . and ..</span><br><span class="line"></span><br><span class="line">       --author</span><br><span class="line"> Manual page ls(1) line 1 (press h for help or q to quit)...skipping...</span><br><span class="line">LS(1)                            User Commands                           LS(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ls - list directory contents</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ls [OPTION]... [FILE]...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       List  information  about  the FILEs (the current directory by default).</span><br><span class="line">       Sort entries alphabetically if none of -cftuvSUX nor --sort  is  speci鈥[m</span><br><span class="line">       fied.</span><br><span class="line"></span><br><span class="line">       Mandatory  arguments  to  long  options are mandatory for short options</span><br><span class="line">       too.</span><br><span class="line"></span><br><span class="line">       -a, --all</span><br><span class="line">              do not ignore entries starting with .</span><br><span class="line"></span><br><span class="line">       -A, --almost-all</span><br><span class="line">              do not list implied . and ..</span><br><span class="line"></span><br><span class="line">       --author</span><br><span class="line">              with -l, print the author of each file</span><br><span class="line"></span><br><span class="line">       -b, --escape</span><br><span class="line">              print C-style escapes for nongraphic characters</span><br><span class="line"></span><br><span class="line">       --block-size=SIZE</span><br><span class="line">              scale sizes by SIZE before printing them; e.g., &apos;--block-size=M&apos;</span><br><span class="line">              prints sizes in units of 1,048,576 bytes; see SIZE format below</span><br><span class="line"></span><br><span class="line">       -B, --ignore-backups</span><br><span class="line">              do not list implied entries ending with ~</span><br><span class="line"></span><br><span class="line">       -c     with -lt: sort by, and show, ctime (time of last modification of</span><br><span class="line">              file status information); with -l: show ctime and sort by  name;</span><br><span class="line">              otherwise: sort by ctime, newest first</span><br><span class="line"></span><br><span class="line">       -C     list entries by columns</span><br><span class="line"></span><br><span class="line">       --color[=WHEN]</span><br><span class="line">              colorize  the  output;  WHEN can be &apos;never&apos;, &apos;auto&apos;, or &apos;always&apos;</span><br><span class="line">              (the default); more info below</span><br></pre></td></tr></table></figure></p><p>输入man ls,其实格式为man+ 命令</p><p>你就会看到相关的帮助文档了。从命令的介绍到命令的参数以及用法介绍的都非常详细的。不错吧。</p><h2 id="Linux系统目录结构"><a href="#Linux系统目录结构" class="headerlink" title="Linux系统目录结构"></a>Linux系统目录结构</h2><p>登录系统后，在当前命令窗口下输入 ls / 你会看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls /</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure></p><p><strong>/bin</strong>  bin是Binary的缩写。这个目录存放着最经常使用的命令。</p><p><strong>/boot</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p><strong>/dev</strong> dev是Device(设备)的缩写。该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p><p><strong>/etc</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p><p><strong>/home</strong> 用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p><strong>/lib</strong> 这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p><strong>/lib64</strong> 包含许多被/bin和/sbin中的程序使用的库文件。目录/usr/lib中含有更多用于用户程序的库文件。</p><p><strong>/media</strong> Linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下。</p><p><strong>/mnt</strong> 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p><p><strong>/opt</strong> 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p><p><strong>/proc</strong> 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all。</span><br></pre></td></tr></table></figure></p><p><strong>/root</strong> 该目录为系统管理员，也称作超级权限者的用户主目录。</p><p><strong>/run</strong> 里面的东西是系统运行时需要的,不能随便删除。但是重启的时候应该抛弃。下次系统运行时重新生成。 </p><p><strong>/sbin</strong> s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><p><strong>/srv</strong> 该目录存放一些服务启动之后需要提取的数据。</p><p><strong>/sys</strong> 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs ，sysfs文件系统集成了下面3种文件系统的信息：</p><ol><li>针对进程信息的proc文件系统</li><li>针对设备的devfs文件系统</li><li>针对伪终端的devpts文件系统</li></ol><p>该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统种被创建。</p><p><strong>/tmp</strong> 这个目录是用来存放一些临时文件的。</p><p><strong>/usr</strong> 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与Windows下的program files目录。</p><p><strong>/usr/bin</strong>：系统用户使用的应用程序。</p><p><strong>/usr/sbin</strong>：超级用户使用的比较高级的管理程序和系统守护程序。</p><p><strong>/usr/src</strong>：内核源代码默认的放置目录。</p><p><strong>/var</strong> 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p><p><strong>在linux系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</strong></p><ul><li>/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</li><li>/bin，/sbin，/usr/bin，/usr/sbin: 这是系统预设的执行文件的放置目录，比如ls就是在/bin/ls目录下的。值得提出的是，/bin, /usr/bin是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin则是给root使用的指令。</li><li>/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</li></ul><h2 id="如何正确关机"><a href="#如何正确关机" class="headerlink" title="如何正确关机"></a>如何正确关机</h2><p>其实，在Linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>Linux和Windows不同，在Linux底下，由于每个程序（或者说是服务）都是在在背景下执行的，因此，在你看不到的屏幕背后其实可能有相当多人同时在你的主机上面工作，例如浏览网页啦、传送信件啦以 FTP传送档案啦等等的，如果你直接按下电源开关来关机时，则其它人的数据可能就此中断！那可就伤脑筋了！此外，最大的问题是，若不正常关机，则可能造成文件系统的毁损（因为来不及将数据回写到档案中，所以有些服务的档案会有问题！）。</p><p>如果你要关机，必须要保证当前系统中没有其他用户在线。可以下达who这个指令，而如果要看网络的联机状态，可以下达netstat -a这个指令，而要看背景执行的程序可以执行ps -aux这个指令。使用这些指令可以让你稍微了解主机目前的使用状态！</p><p>关于关机的一些指令</p><p>sync 将数据由内存同步到硬盘中。</p><p>shutdown 关机指令，你可以man shutdown来看一下帮助文档。例如你可以运行如下命令关机：</p><p>shutdown –h 10<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This server will shutdown after 10 mins</span><br></pre></td></tr></table></figure></p><p>这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</p><p>shutdown –h now 立马关机</p><p>shutdown –h 20:25 系统会在今天20:25关机</p><p>shutdown –h +10 十分钟后关机</p><p>shutdown –r now 系统立马重启</p><p>shutdown –r +10 系统十分钟后重启</p><p>reboot 就是重启，等同于shutdown –r now</p><p>halt关闭系统，等同于shutdown –h now和poweroff</p><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/linux.jpg&quot; alt=&quot;Linux&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门（三）Linux操作系统的安装</title>
    <link href="https://jingguanghui.github.io/2018/05/17/Linux_3/"/>
    <id>https://jingguanghui.github.io/2018/05/17/Linux_3/</id>
    <published>2018-05-17T12:30:20.000Z</published>
    <updated>2018-05-17T13:02:08.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/linux.jpg" alt="Linux" style="width:100%"><br><a id="more"></a><br>因为作为练习用，所以直接在Windows中安装VMware Workstations，然后在VMware Workstations中安装Linux系统。</p><h2 id="VMware-Workstations"><a href="#VMware-Workstations" class="headerlink" title="VMware Workstations"></a>VMware Workstations</h2><p>来自百度百科的介绍</p><blockquote><p>VMware Workstation允许操作系统(OS)和应用程序(Application)在一台虚拟机内部运行。虚拟机是独立运行主机操作系统的离散环境。在VMware Workstation中，你可以在一个窗口中加载一台虚拟机，它可以运行自己的操作系统和应用程序。你可以在运行于桌面上的多台虚拟机之间切换，通过一个网络共享虚拟机(例如一个公司局域网)，挂起和恢复虚拟机以及退出虚拟机，这一切不会影响你的主机操作和任何操作系统或者其它正在运行的应用程序。</p></blockquote><h2 id="为什么选择CentOS"><a href="#为什么选择CentOS" class="headerlink" title="为什么选择CentOS"></a>为什么选择CentOS</h2><p>CentOS是RHEL（Red Hat Enterprise Linux）源代码再编译的产物，而且在RHEL的基础上修正了不少已知的Bug ，相对于其他Linux发行版，其稳定性值得信赖。所以在这里选择CentOS。</p><h2 id="VMware-Workstations中安装CentOS"><a href="#VMware-Workstations中安装CentOS" class="headerlink" title="VMware Workstations中安装CentOS"></a>VMware Workstations中安装CentOS</h2><p>关于VMware Workstations中安装CentOS网上有很多资源，可以自行查找。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/linux.jpg&quot; alt=&quot;Linux&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门（二）图形界面还是命令窗口</title>
    <link href="https://jingguanghui.github.io/2018/05/16/Linux_2/"/>
    <id>https://jingguanghui.github.io/2018/05/16/Linux_2/</id>
    <published>2018-05-16T15:40:20.000Z</published>
    <updated>2018-05-16T15:43:57.517Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/linux.jpg" alt="Linux" style="width:100%"><br><a id="more"></a><br>对于Linux的应用，我想大多数都是用在服务器领域，对于服务器来讲真的没有必要跑一个图形界面。所以我们平时安装Linux操作系统时往往是不安装图形界面的。说到这里也许你会有疑问，图形界面还能选择装或者不装？</p><p>是的，虽然Linux和微软的Windows一样同位操作系统，但是它们有一个很大的区别就是Windows操作系统的图形界面是和内核一体的，俗称微内核，而Linux操作系统图形界面就像一个软件一样，和内核并不是一体的。所以Linux你可以选择不安装图形界面，这样不仅不影响服务器的正常使用还可以节省系统资源的开销，何乐而不为呢？</p><p>如果你对Linux超级感兴趣，想使用Linux就像使用Windows一样，那你可以安装图形界面，可以像Windows一样来体验Linux也是蛮不错的。但是如果你想成为一个专业的Linux系统工程师，那建议你从第一天开始就不要去安装图形界面，从命令窗口开始熟悉它。</p><p>另外一点值得说的是，日常应用中，我们都是远程管理服务器的，不可能开着图形界面来让你去操作，虽然目前也有相应的工具支持远程图形连接服务器，可是那样太消耗网络带宽资源，所以从这方面来考虑还是建议不要使用图形界面。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/linux.jpg&quot; alt=&quot;Linux&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux入门（一）初始Linux</title>
    <link href="https://jingguanghui.github.io/2018/05/16/Linux_1/"/>
    <id>https://jingguanghui.github.io/2018/05/16/Linux_1/</id>
    <published>2018-05-16T12:50:20.000Z</published>
    <updated>2018-05-16T15:41:02.528Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/linux.jpg" alt="Linux" style="width:100%"><br><a id="more"></a><br>在介绍Linux前，我想先针对大家如何对Linux的发音说一下。我发现我身边的朋友对Linux的发音大致有这么几种： “里那克斯”与“里你克斯”“里扭克斯”等。其实官方的标准发音为 [‘li:nэks]，因为这个发音是创始人Linus的发音。如果你不认识这个音标，那么就读成“里那克斯”。而我习惯发音成“里扭克斯”，当然你发音成什么，并没有人会说你，完全是一个人的习惯而已。</p><h2 id="操作系统的发展史"><a href="#操作系统的发展史" class="headerlink" title="操作系统的发展史"></a>操作系统的发展史</h2><h3 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h3><p>1965年之前的时候，电脑并不像现在一样普遍，它可不是一般人能碰的起的，除非是军事或者学院的研究机构，而且当时大型主机至多能提供30台终端（30个键盘、显示器)，连接一台电脑。<br><img src="http://p6v6hsmcp.bkt.clouddn.com/Unix.png" alt="Unix" style="width:100%"></p><p>为了解决数量不够用的问题,1965年左右由贝尔实验室、麻省理工学院以及通用电气共同发起了Multics项目，想让大型主机支持300台终端。</p><p>1969年前后这个项目进度缓慢，资金短缺，贝尔实验室退出了研究。</p><p>1969年从这个项目中退出的Ken Thompson当时在实验室无聊时，为了让一台空闲的电脑上能够运行“星际旅行”游行，在8月份左右趁着其妻子探亲的时间，用了1个月的时间 编写出了Unix操作系统的原型。</p><p>1970年，美国贝尔实验室的Ken Thompson，以BCPL语言为基础，设计出很简单且很接近硬件的B语言（取BCPL的首字母），并且他用B语言写了第一个Unix操作系统。</p><p>因为B语言的跨平台性较差，为了能够在其他的电脑上也能够运行这个非常棒的Unix操作系统，Dennis Ritchie和Ken Thompson从B语言的基础上准备研究一个更好的语言。</p><p>1972年，美国贝尔实验室的Dennis Ritchie在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。</p><p>1973年初，C语言的主体完成。Thompson和Ritchie迫不及待地开始用它完全重写了现在大名鼎鼎的Unix操作系统。</p><h3 id="Minix"><a href="#Minix" class="headerlink" title="Minix"></a>Minix</h3><p>因为AT&amp;T(通用电气)的政策改变，在Version7 Unix推出之后，发布新的使用条款，将Unix源代码私有化，在大学中不再能使用Unix源代码。AndrewS.Tanenbaum(塔能鲍姆)教授为了能在课堂上教授学生操作系统运作的实务细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统，以避免版权上的争议。他以小型Unix（mini-UNIX）之意，将它称为Minix。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>因为Minix只是教学使用，因此功能并不强，因此Torvalds利用GNU的bash当做开发环境，gcc当做编译工具，编写了Linux内核-v0.02，但是一开始Linux并不能兼容Unix，即Unix上跑的应用程序不能在Linux上跑，即应用程序与内核之间的接口不一致，因为Unix是遵循POSIX规范的，因此Torvalds修改了Linux，并遵循POSIX（Portable Operating System Interface，他规范了应用程序与内核的接口规范）； 一开始Linux只适用于386，后来经过全世界的网友的帮助，最终能够兼容多种硬件。</p><h3 id="操作系统的发展"><a href="#操作系统的发展" class="headerlink" title="操作系统的发展"></a>操作系统的发展</h3><p>Unix和Linux的应用范围<br><img src="http://p6v6hsmcp.bkt.clouddn.com/os.gif" alt="Unix" style="width:100%"><br>Linux的应用领域<br><img src="http://p6v6hsmcp.bkt.clouddn.com/os1.png" alt="Unix" style="width:100%"><br>ios的来源<br><img src="http://p6v6hsmcp.bkt.clouddn.com/os2.png" alt="Unix" style="width:100%"></p><h3 id="Minix没有火起来的原因"><a href="#Minix没有火起来的原因" class="headerlink" title="Minix没有火起来的原因"></a>Minix没有火起来的原因</h3><blockquote><p>Minix的创始人说，Minix3没有统治世界是源于他在1992年犯下的一个错误，当时他认为BSD必然会一统天下，因为它是一个更稳定和更成熟的系统，其它操作系统难以与之竞争。因此他的Minix的重心集中在教育上。四名BSD开发者已经成立了一家公司销售BSD系统，他们甚至还有一个有趣的电话号码1-800-ITS-UNIX。然而他们正因为这个电话号码而惹火上身。美国电话电报公司因电话号码而提起诉讼。官司打了三年才解决。在此期间，BSD陷于停滞，而Linux则借此一飞冲天。他的错误在于没有意识官司竟然持续了如此长的时间，以及BSD会因此受到削弱。如果美国电话电报公司没有起诉，Linux永远不会流行起来，BSD将统治世界。</p></blockquote><h2 id="Linux的不同版本以及应用领域"><a href="#Linux的不同版本以及应用领域" class="headerlink" title="Linux的不同版本以及应用领域"></a>Linux的不同版本以及应用领域</h2><h3 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h3><p>内核(kernel)是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。</p><p>Linux内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环：</p><ul><li>稳定版：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些bug或加入一些新的驱动程序。</li><li>开发版：由于要试验各种解决方案，所以变化很快。</li></ul><p><a href="https://www.kernel.org/" target="_blank" rel="noopener">Linux官网</a>，所有来自全世界的对Linux源码的修改最终都会汇总到这个网站，由Linus领导的开源社区对其进行甄别和修改最终决定是否进入到Linux主线内核源码中。</p><h3 id="Linux发行版本"><a href="#Linux发行版本" class="headerlink" title="Linux发行版本"></a>Linux发行版本</h3><p>Linux发行版(也被叫做GNU/Linux发行版)说简单点就是将Linux内核与应用软件做一个打包。较知名的发行版有：Ubuntu、RedHat、CentOS、Debain、Fedora、SuSE、OpenSUSE、TurboLinux、BluePoint、RedFlag、Xterm、SlackWare等。</p><h4 id="RHEL-RedHat-Enterprise-Linux"><a href="#RHEL-RedHat-Enterprise-Linux" class="headerlink" title="RHEL (RedHat Enterprise Linux)"></a>RHEL (RedHat Enterprise Linux)</h4><p>RHEL的地位就像Ubuntu在Linux桌面发行版中的地位一样。Red Hat Enterprise Linux背后的红帽公司是Linux早期最大的企业。多年来，他们不断地对RHEL进行改进，确保大多数软件包和硬件都是RHEL支持或“认证”的。除了认证状态外，长期支持在顶级Linux服务器操作系统中也很重要。该公司声称，全球“财富”500强中有90％的公司使用RHEL，这个数字可以说是非常多了。</p><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><p>如果你不想花钱，但又希望有使用RHEL一般的体验，最好的方法是下载免费的Linux服务器发行版CentOS。从另一个角度来看，这是社区支持的RHEL，但是没有Red Hat的支持。CentOS与RHEL是二进制兼容的，RHEL也成为了该选项很重要的加分点。就像RHEL一样，CentOS软件库包含经过测试的软件，它对生产系统来说是安全和稳定的。说到控制面板，cPanel让CentOS可以提供更好的支持。如果熟悉.rpm软件包和yum软件包管理器，CentOS就是最佳Linux服务器操作系统。</p><h4 id="Ubuntu-LTS"><a href="#Ubuntu-LTS" class="headerlink" title="Ubuntu LTS"></a>Ubuntu LTS</h4><p>与RHEL和CentOS相比，Ubuntu LTS获取软件包的速度更快。这个选择再次归结为用户的特殊需求，如果想要某些应用程序和软件上的所有最新功能，请转到Ubuntu。此外，它拥有广泛的社区，对于愿意跳入Linux世界的初学者而言，也建议这样做。</p><p>谈到性能，Ubuntu提供了一个灵活的性能。开发者可以选择Ubuntu服务器选项，它提供了一些有用的软件包比如邮件服务器，LAMP服务器，Samba文件服务器，OpenStackMitaka，Nginx等。该发行版的5年LTS支持也保证了初学者的使用，开发者可以设置媒体服务器，电子邮件服务器或游戏服务器等场景。</p><h4 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h4><p>为什么一些流行的Linux发行版是基于Debian的呢？这归结于Debian的稳定性。尽管开发者希望在Debian上做的任何事情都可以在Ubuntu上实现，但是如果高于平均水平，稳定性就变得非常重要，我们建议开发者选择Debian。另外要记住的是，Debian只附带免费软件。与Ubuntu相比，它更轻巧，速度更快，这使得它成为旧硬件的合适选择。</p><p>简而言之，如果你正在考虑安全问题并且熟悉Linux的企业环境，并且你需要一个Linux服务器操作系统，相比于Ubuntu，选择Debian更合适。</p><h4 id="SLES-SUSE-Linux-Enterprise-Server"><a href="#SLES-SUSE-Linux-Enterprise-Server" class="headerlink" title="SLES (SUSE Linux Enterprise Server)"></a>SLES (SUSE Linux Enterprise Server)</h4><p>就像RHEL和Canonical一样，SUSE在开源世界中也是一个非常有名的发行版。它始于1992年，是第一家为企业客户推销Linux的公司。该公司的主要产品是SUSE Linux Enterprise Server。 最近与SAP和微软达成合作关系，这也将其带入了不同的企业服务市场。</p><p>使用SLES（和OpenSUSE）的一大优势是YaST软件管理系统，这使许多复杂的任务变得更简单和自动化。它有用户的GUI和命令行界面，这就是SLES也被称为管理友好型Linux发行版的原因。它是为正在寻找多用途Linux服务器发行版的高级用户而打造的。</p><h3 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h3><h4 id="个人桌面领域"><a href="#个人桌面领域" class="headerlink" title="个人桌面领域"></a>个人桌面领域</h4><p>此领域是传统linux应用最薄弱的环节，传统linux由于界面简单、操作复杂、应用软件少的缺点，一直被windows所压制，但近些年来随着ubuntu、fedora等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，linux在个人桌面领域的占有率在逐渐的提高。</p><p>典型代表：ubuntu、fedora、suse linux等</p><h4 id="服务器领域"><a href="#服务器领域" class="headerlink" title="服务器领域"></a>服务器领域</h4><p>linux在服务器领域的应用是其重要分支。</p><p>linux免费、稳定、高效等特点在这里得到了很好的体现，但早期因为维护、运行等原因同样受到了很大的限制，但近些年来linux服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛。</p><p>典型代表：Red Hat公司的AS系列、完全开源的debian系列、suse EnterPrise11系列等。</p><h4 id="嵌入式领域"><a href="#嵌入式领域" class="headerlink" title="嵌入式领域"></a>嵌入式领域</h4><p>linux运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百KB等特点，使其近些年来在嵌入式领域的应用得到非常大的提高。</p><p>主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、等都是其应用领域，得到了摩托罗拉、三星、NEC、Google等公司的大力推广。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/linux.jpg&quot; alt=&quot;Linux&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java中对File的操作</title>
    <link href="https://jingguanghui.github.io/2018/04/20/File/"/>
    <id>https://jingguanghui.github.io/2018/04/20/File/</id>
    <published>2018-04-20T02:09:20.000Z</published>
    <updated>2018-05-14T13:14:14.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/File.jpeg" alt="File" style="width:100%"><br><a id="more"></a><br>一直以来对File类中的API不太了解，今天借着对《Java编程思想（第4版）》中第18.1章File类的学习，做一个相对深入的研究。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 创建后的文件对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_CreateDirectory</span><span class="params">(String as_Path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(!file.isDirectory())&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"路径存在但不是目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果文件夹不存在，则会创建，并返回true;如果存在，则不会创建，并返回false</span></span><br><span class="line">file.mkdirs();</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里普及一下mkdirs()和mkdir()的区别：</p><p>mkdirs()可以建立多级文件夹， mkdir()只会建立一级的文件夹， 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> File(<span class="string">"/tmp/one/two/three"</span>).mkdirs();</span><br></pre></td></tr></table></figure></p><p>执行后， 会建立tmp/one/two/three四级目录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> File(<span class="string">"/tmp/one/two/three"</span>).mkdir();</span><br></pre></td></tr></table></figure></p><p>则不会建立任何目录， 因为找不到/tmp/one/two目录， 结果返回false</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isDelete 如果文件已存在，是否删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 创建后的文件对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_CreateFile</span><span class="params">(String as_Path,<span class="keyword">boolean</span> isDelete)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(isDelete)&#123;</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">file.delete();</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(as_Path.endsWith(File.separator))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"创建单个文件"</span> +as_Path + <span class="string">"失败，目标文件不能为目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断目标文件所在的目录是否存在 </span></span><br><span class="line"><span class="keyword">if</span>(file.getParentFile()!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!file.getParentFile().exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(!file.getParentFile().mkdirs()) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"创建目标文件所在目录失败！"</span>);      </span><br><span class="line">            &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="note danger"><p>在创建文件时，必须保证目标文件不存在，而且父目录存在，否则会创建失败 </p></div></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除目录（包括子目录） </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 要删除的目录路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isIncludeRoot 是否包含路径本身</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uf_DelTree</span><span class="params">(String as_Path,<span class="keyword">boolean</span> isIncludeRoot)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"要删除的路径不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file.isDirectory())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"路径存在，但不是目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">File[] files=file.listFiles();</span><br><span class="line">String fileName;</span><br><span class="line"><span class="keyword">for</span>(File file1:files)&#123;</span><br><span class="line">fileName=file1.getName();</span><br><span class="line"><span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">FileHelper.uf_DelTree(as_Path+File.separator+fileName, <span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">file1.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isIncludeRoot)&#123;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里普及一下File类中的list()和listFiles()方法的区别：</p><ul><li><p>list()方法是返回某个目录下的所有文件和目录的文件名，返回的是String数组</p></li><li><p>listFiles()方法是返回某个目录下所有文件和目录的绝对路径，返回的是File数组</p></li></ul><figure class="highlight java"><figcaption><span>list()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    String[] fileNames=file.list();</span><br><span class="line">    <span class="keyword">for</span>(String fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">build.xml</span><br><span class="line">Documentation1.java</span><br><span class="line">Documentation2.java</span><br><span class="line">Documentation3.java</span><br><span class="line">HelloDate.java</span><br><span class="line">HelloDate1.java</span><br><span class="line">ShowProperties.java</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><figcaption><span>listFiles()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    File[] fileNames=file.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\thinkingInJava\Think in Java 4 code\object\build.xml</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation2.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation3.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\ShowProperties.java</span><br></pre></td></tr></table></figure></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除文件 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 要删除的文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uf_DelFile</span><span class="params">(String as_Path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"要删除的文件不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(as_Path.endsWith(File.separator))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除单个文件"</span> +as_Path + <span class="string">"失败，目标文件不能为目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除单个文件"</span> +as_Path + <span class="string">"失败，目标文件不是文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_SourFile 源文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_DestFile 目标文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isOvercast 如果目标文件存在是否覆盖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_CopyFile</span><span class="params">(String as_SourFile,String as_DestFile,<span class="keyword">boolean</span> isOvercast)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File sourFile=<span class="keyword">new</span> File(as_SourFile);</span><br><span class="line"><span class="keyword">if</span>(!sourFile.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"复制文件"</span> +as_SourFile + <span class="string">"失败，源文件不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!sourFile.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"复制文件"</span> +as_SourFile + <span class="string">"失败，源文件不是文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">File destFile=<span class="keyword">new</span> File(as_DestFile);</span><br><span class="line"><span class="keyword">if</span>(destFile.exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(!destFile.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"复制文件"</span> +as_SourFile + <span class="string">"失败，目标路径"</span>+as_DestFile+<span class="string">"存在,但不是文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!isOvercast)&#123;</span><br><span class="line"><span class="keyword">return</span> destFile;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FileInputStream fileInputStream=<span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fileOutputStream=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileInputStream=<span class="keyword">new</span> FileInputStream(sourFile);</span><br><span class="line">fileOutputStream=<span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"><span class="keyword">byte</span>[] buf=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fileInputStream.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">fileOutputStream.write(buf, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fileInputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fileInputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fileOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fileOutputStream.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> destFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目录复制(含子目录)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_sPath 源路径       </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_dPath 目标路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ab_IsIncludeRoot 是否包含源路径本身</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uf_CopyTree</span><span class="params">(String as_sPath, String as_dPath, <span class="keyword">boolean</span> ab_IsIncludeRoot)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    File lo_sFile = <span class="keyword">new</span> File(as_sPath);</span><br><span class="line">    <span class="keyword">if</span> (!lo_sFile.exists())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并不存在。"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!lo_sFile.isDirectory())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并非目录。"</span>);</span><br><span class="line">    File lo_dFile = <span class="keyword">new</span> File(as_dPath);</span><br><span class="line">    <span class="keyword">if</span> (!lo_dFile.exists())&#123;</span><br><span class="line">    lo_dFile.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!lo_dFile.isDirectory())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"目标路径并非目录。"</span>);</span><br><span class="line">    File lo_NewFile, lo_File;</span><br><span class="line">    String ls_Name;</span><br><span class="line">    <span class="keyword">if</span> (ab_IsIncludeRoot)</span><br><span class="line">    &#123;</span><br><span class="line">        ls_Name = lo_sFile.getName();</span><br><span class="line">        lo_NewFile = <span class="keyword">new</span> File(as_dPath +File.separator + ls_Name);</span><br><span class="line">        <span class="keyword">if</span> (!lo_NewFile.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            lo_NewFile.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!lo_NewFile.isDirectory())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"目标路径存在但并非目录。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FileHelper.uf_CopyTree(as_sPath, as_dPath + File.separator  + ls_Name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        File[] lo_Files = lo_sFile.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; lo_Files.length; ii++)</span><br><span class="line">        &#123;</span><br><span class="line">            lo_File = lo_Files[ii];</span><br><span class="line">            ls_Name = lo_File.getName();</span><br><span class="line">            <span class="keyword">if</span> (lo_File.isDirectory())</span><br><span class="line">            &#123;</span><br><span class="line">                lo_NewFile = <span class="keyword">new</span> File(as_dPath + File.separator  + ls_Name);</span><br><span class="line">                <span class="keyword">if</span> (!lo_NewFile.exists())</span><br><span class="line">                &#123;</span><br><span class="line">                    lo_NewFile.mkdir();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!lo_NewFile.isDirectory())</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"目标路径存在但并非目录。"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                FileHelper.uf_CopyTree(as_sPath + File.separator  + ls_Name, as_dPath + File.separator  + ls_Name, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                FileHelper.uf_CopyFile(as_sPath + File.separator  + ls_Name, as_dPath + File.separator  + ls_Name, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_sFile 源文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_dFile 目标文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ab_IsOvercast 目标文件存在是否覆盖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 移动后的File对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_MoveFile</span><span class="params">(String as_sFile, String as_dFile, <span class="keyword">boolean</span> ab_IsOvercast)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    File lo_sFile = <span class="keyword">new</span> File(as_sFile);</span><br><span class="line">    File lo_dFile = FileHelper.uf_CopyFile(as_sFile, as_dFile, ab_IsOvercast);</span><br><span class="line">    lo_sFile.delete();</span><br><span class="line">    <span class="keyword">return</span> lo_dFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>首先，再普及一下File类中的list()和listFiles()方法的区别：</p><ul><li><p>list()方法是返回某个目录下的所有文件和目录的文件名，返回的是String数组</p></li><li><p>listFiles()方法是返回某个目录下所有文件和目录的绝对路径，返回的是File数组</p></li></ul><figure class="highlight java"><figcaption><span>list()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    String[] fileNames=file.list();</span><br><span class="line">    <span class="keyword">for</span>(String fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">build.xml</span><br><span class="line">Documentation1.java</span><br><span class="line">Documentation2.java</span><br><span class="line">Documentation3.java</span><br><span class="line">HelloDate.java</span><br><span class="line">HelloDate1.java</span><br><span class="line">ShowProperties.java</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><figcaption><span>listFiles()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    File[] fileNames=file.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\thinkingInJava\Think in Java 4 code\object\build.xml</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation2.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation3.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\ShowProperties.java</span><br></pre></td></tr></table></figure></p><h3 id="目录列表器"><a href="#目录列表器" class="headerlink" title="目录列表器"></a>目录列表器</h3><p>对符合条件的文件进行筛选<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 筛选符合条件的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_sFile 目录文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reg 要筛选的文件正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 符合条件的文件集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] uf_ListFile(String as_sFile,<span class="keyword">final</span> String reg)<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    File path = <span class="keyword">new</span> File(as_sFile);</span><br><span class="line">    <span class="keyword">if</span> (!path.exists())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并不存在。"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!path.isDirectory())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并非目录。"</span>);</span><br><span class="line">    String[] list;</span><br><span class="line">    <span class="keyword">if</span>(reg==<span class="keyword">null</span>||<span class="string">""</span>.equals(reg))</span><br><span class="line">      list = path.list();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">      list = path.list(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">        <span class="keyword">private</span> Pattern pattern = Pattern.compile(reg);</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> pattern.matcher(name).matches();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">//按字母顺序排序</span></span><br><span class="line">    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><i class="fa fa-book fa-lg"></i><a href="https://github.com/jingguanghui/bolgSource/blob/master/File/FileHelper.java" target="_blank" rel="noopener">查看源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/File.jpeg&quot; alt=&quot;File&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="File" scheme="https://jingguanghui.github.io/tags/File/"/>
    
      <category term="Java I/O系统" scheme="https://jingguanghui.github.io/tags/Java-I-O%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>单点登录</title>
    <link href="https://jingguanghui.github.io/2018/04/19/SingleSignOn/"/>
    <id>https://jingguanghui.github.io/2018/04/19/SingleSignOn/</id>
    <published>2018-04-19T08:04:20.000Z</published>
    <updated>2018-04-22T04:24:00.178Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/SingleSignOn.jpg" alt="SingleSignOn" style="width:100%"><br><a id="more"></a><br>发现一篇讲解单点登录非常好的文章，直接上网址:<a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="noopener">单点登录原理与简单实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/SingleSignOn.jpg&quot; alt=&quot;SingleSignOn&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中MD5加密和JavaScript中MD5加密</title>
    <link href="https://jingguanghui.github.io/2018/04/19/md5/"/>
    <id>https://jingguanghui.github.io/2018/04/19/md5/</id>
    <published>2018-04-19T04:10:20.000Z</published>
    <updated>2018-04-22T04:24:00.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/md5.jpg" alt="JavaScript" style="width:100%"><br><a id="more"></a></p><h2 id="Java中MD5加密"><a href="#Java中MD5加密" class="headerlink" title="Java中MD5加密"></a>Java中MD5加密</h2><p>废话不多说，直接上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Title: Md5Helper类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Description: 获取一个文件或字节数组的MD5信息摘要</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Helper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类禁止外部实例化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Md5Helper</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//donone</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个字节数组的MD5信息摘要</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Info</span></span><br><span class="line"><span class="comment"> *            原始信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MD5信息摘要</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> java.lang.IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *             如果参数无效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> java.lang.Exception</span></span><br><span class="line"><span class="comment"> *             包含其它任何异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] uf_Md5(<span class="keyword">byte</span>[] as_Info)</span><br><span class="line"><span class="keyword">throws</span> IllegalArgumentException, Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((as_Info == <span class="keyword">null</span>) || (as_Info.length == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"无效参数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">        MessageDigest alga = java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">alga.update(as_Info);</span><br><span class="line"><span class="keyword">return</span> alga.digest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密</span></span><br><span class="line"><span class="comment"> * 字节数组转换为16进制显示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> info 字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 16进制显示字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uf_byte2hex</span><span class="params">(<span class="keyword">byte</span>[] info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String hs = <span class="string">""</span>;</span><br><span class="line">String stmp = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; info.length; n++)</span><br><span class="line">&#123;</span><br><span class="line">stmp = (java.lang.Integer.toHexString(info[n] &amp; <span class="number">0XFF</span>));</span><br><span class="line"><span class="keyword">if</span> (stmp.length() == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">hs = hs + <span class="string">"0"</span> + stmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hs = hs + stmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*主方法测试</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalArgumentException, Exception </span>&#123;</span><br><span class="line">System.out.println(uf_byte2hex(uf_Md5(<span class="string">"value"</span>.getBytes())));<span class="comment">//2063c1608d6e0baf80249c42e2be5804</span></span><br><span class="line">System.out.println(uf_byte2hex(uf_Md5(<span class="string">"111111"</span>.getBytes())));<span class="comment">//96e79218965eb72c92a549dd5a330112</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JavaScript中MD5加密"><a href="#JavaScript中MD5加密" class="headerlink" title="JavaScript中MD5加密"></a>JavaScript中MD5加密</h2><p>废话不多说，直接上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"yourUrl/md5.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line">或者：  </span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hash = md5(<span class="string">"value"</span>);  <span class="comment">// 2063c1608d6e0baf80249c42e2be5804  </span></span><br><span class="line"><span class="keyword">var</span> hash = md5(<span class="string">"111111"</span>);  <span class="comment">// 96e79218965eb72c92a549dd5a330112</span></span><br></pre></td></tr></table></figure></p><p>参考：</p><ol><li><a href="http://www.bootcdn.cn/blueimp-md5/" target="_blank" rel="noopener">http://www.bootcdn.cn/blueimp-md5/</a></li><li><a href="https://github.com/blueimp/JavaScript-MD5" target="_blank" rel="noopener">https://github.com/blueimp/JavaScript-MD5</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/md5.jpg&quot; alt=&quot;JavaScript&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="前端" scheme="https://jingguanghui.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://jingguanghui.github.io/tags/JavaScript/"/>
    
      <category term="js" scheme="https://jingguanghui.github.io/tags/js/"/>
    
      <category term="加密技术" scheme="https://jingguanghui.github.io/tags/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中取得链接参数某参数的值</title>
    <link href="https://jingguanghui.github.io/2018/04/19/JavaScript_1/"/>
    <id>https://jingguanghui.github.io/2018/04/19/JavaScript_1/</id>
    <published>2018-04-19T01:38:20.000Z</published>
    <updated>2018-04-22T04:24:00.178Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/javascript.jpg" alt="JavaScript" style="width:100%"><br><a id="more"></a><br>不多说，直接上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinkValue</span>(<span class="params">paraName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> strHref = <span class="built_in">window</span>.document.location.href;</span><br><span class="line"><span class="keyword">var</span> intPos = strHref.indexOf(<span class="string">"?"</span>);</span><br><span class="line"><span class="keyword">var</span> strRight = strHref.substr(intPos + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> arrTmp = strRight.split(<span class="string">"&amp;"</span>);</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrTmp.length; i=i+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> arrTemp = arrTmp[i].split(<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">if</span> (arrTemp[<span class="number">0</span>].toUpperCase() == paraName.toUpperCase()) <span class="keyword">return</span> arrTemp[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TITLE</span>&gt;</span> New Document <span class="tag">&lt;/<span class="name">TITLE</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Generator"</span> <span class="attr">CONTENT</span>=<span class="string">"EditPlus"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Author"</span> <span class="attr">CONTENT</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Keywords"</span> <span class="attr">CONTENT</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Description"</span> <span class="attr">CONTENT</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(getLinkValue(<span class="string">'jhg'</span>));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getLinkValue</span>(<span class="params">paraName</span>)</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> strHref = <span class="built_in">window</span>.document.location.href;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> intPos = strHref.indexOf(<span class="string">"?"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> strRight = strHref.substr(intPos + <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arrTmp = strRight.split(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrTmp.length; i=i+<span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arrTemp = arrTmp[i].split(<span class="string">"="</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (arrTemp[<span class="number">0</span>].toUpperCase() == paraName.toUpperCase()) <span class="keyword">return</span> arrTemp[<span class="number">1</span>];</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/javascript.jpg&quot; alt=&quot;JavaScript&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://jingguanghui.github.io/categories/JavaScript/"/>
    
    
      <category term="前端" scheme="https://jingguanghui.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://jingguanghui.github.io/tags/JavaScript/"/>
    
      <category term="js" scheme="https://jingguanghui.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>《Maven实战》学习（三）</title>
    <link href="https://jingguanghui.github.io/2018/04/13/maven_3/"/>
    <id>https://jingguanghui.github.io/2018/04/13/maven_3/</id>
    <published>2018-04-13T10:48:20.000Z</published>
    <updated>2018-04-22T04:24:00.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg" alt="maven" style="width:100%"><br><a id="more"></a></p><h2 id="背景案例"><a href="#背景案例" class="headerlink" title="背景案例"></a>背景案例</h2><p>接下里的Maven学习，将引入一个真实的案例来进行学习，该案例的目的还是帮助我们理解Maven的概念， 以及展示大部分Maven项目需要面对和处理的一些问题。</p><h3 id="简单的注册服务"><a href="#简单的注册服务" class="headerlink" title="简单的注册服务"></a>简单的注册服务</h3><p>注册互联网账户是日常生活中再熟悉不过的一件事悄 ，作为一个用户，注册账户的时候往往需要做以下事情：</p><ul><li>提供一个未被使用的账号ID</li><li>提供一个未被使用的Email地址</li><li>提供一个任意的显示名称</li><li>设置安全密码，并重复输入以确认</li><li>输入验证码</li><li>前往邮箱查收激活链接并单击激活账号</li><li>登录</li></ul><p>写这些的主要目的是让读者清楚地了解这个背景案例 即账户注册服务，它的需求是什么？基于这样的一个需求 ，我们会怎样设计这个小型的系统。</p><h3 id="需求阐述"><a href="#需求阐述" class="headerlink" title="需求阐述"></a>需求阐述</h3><p>下面从软件工程的视角来分析一下该服务的需求：</p><h4 id="需求用例"><a href="#需求用例" class="headerlink" title="需求用例"></a>需求用例</h4><blockquote><p><strong>注册账户</strong><br>主耍场景：</p><blockquote><p>1.用户访问注册页面<br>2.系统生成验证码图片<br>3.用户输入想要的ID、Email地址，想要的显示名称、密码、确认密码<br>4.用户输入验证码<br>5.用户提交注册请求<br>6.系统检查验证码<br>7.系统检查ID是否已经被注册，Email是否已经被注册，密码和确认密码是否一致<br>8.系统保存未激活的账户信息<br>9.系统生成激活链接，井发送至用户邮箱<br>10.用户打开邮箱，访问激活链接<br>11.系统解析激活链接，激活相关账户<br>12.用户使用ID和密码登录</p></blockquote></blockquote><blockquote><p>扩展场景</p><blockquote><p>4a: 用户无法看清验证玛，请求重新生成</p><blockquote><p>1.跳转到步骤2</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>6a: 系统检测到用户输入的验证码错误</p><blockquote><p>1.系统提示验证码错误<br>2.跳转到步骤2</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>7a: 系统检测到ID已被注册，或者Email已被注册，或者密码和确认密码不一致</p><blockquote><p>1.系统提示相关错误信息<br>2.跳转到步骤2</p></blockquote></blockquote></blockquote><p>该用例的角色只有两个：用户和系统。“主要场景”描述了用户如何与系统一步一步地交互，并且成功完成注册; “扩展场景”则描述了一些中途发生意外的情形，比如用户输错验证码的时候，系统就需要从新生成验证码，用户也需要重新输入验证码。</p><h3 id="简要设计"><a href="#简要设计" class="headerlink" title="简要设计"></a>简要设计</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>从需求用例中可以看到，系统对外的接口包括生成验证码图片、处理注册请求、激活账户以及处理登录等。</p><h4 id="模块结构"><a href="#模块结构" class="headerlink" title="模块结构"></a>模块结构</h4><ul><li>cn.jgh.account.service: 系统的核心，它封装了所有下层细节，对外暴露简单的接口。</li><li>cn.jgh.account.web: 顾名思义该模块包含所有与web相关的内容，包括可能的JSP、Servlet、web.xml等，它直接依赖于cn.jgh.account.service模块，使用其提供的服务。</li><li>cn.jgh.maven.account.persist: 处理账户信息的持久化，包括增、删、改、查等。根据实现，可以基于数据库或者文件。</li><li>cn.jgh.account.captcha: 处理验证码的key生成、图片生成以及验证等。这里需要第三方的类库来帮助实现这些功能。</li><li>cn.jgh.account.email: 处理邮件服务的配置、激活邮件的编写和发送。</li></ul><h2 id="坐标和依赖"><a href="#坐标和依赖" class="headerlink" title="坐标和依赖"></a>坐标和依赖</h2><p>正如前面介绍的， Maven的一大功能是管理项目依赖。 为了能自动化地解析任何一个Java构件，Maven就必须将它们唯一标识，这就依赖管理的底层基础——坐标。</p><h3 id="何为Maven坐标？"><a href="#何为Maven坐标？" class="headerlink" title="何为Maven坐标？"></a>何为Maven坐标？</h3><p>Maven的世界中拥有数量非常巨大的构件，也就是平时用的一些jar、war等构件。在Maven为这些构件引人坐标概念之前，我们无法使用任何一种方式来唯一标识所有这些构件。 因此，当需要用到SpringFramework依赖的时候，大家会去SpringFramework网站寻找；当需要用到log4j依赖的时候,大家又会去Apache网站寻找。又因为各个项目的网站风格迥异，大量的时间花费在了搜索、浏览网页等工作上面。 没有统一的规范、统一的法则，该工作就无法自动化。Maven定义了这样一组规则：世界上任何一个构件都可以使用Maven坐标唯一标识，Maven坐标的元素包括groupID、artifactId、version、packaging、classifier。现在，只要我们提供正确的坐标元素，Maven就能找到对应的构件。Maven是从哪里下载构件的呢？答案其实很简单，Maven内置了一个<a href="https://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">中央仓库</a>的地址,该中央仓库包含了世界上大部分流行的开源项目构件， Maven会在需要的时候去那里下载。</p><h3 id="坐标详解"><a href="#坐标详解" class="headerlink" title="坐标详解"></a>坐标详解</h3><p>一组Maven坐标是通过一些元素定义的，它们是groupId、artifactId、version、packaging、classifier。看下面的代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.nexus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-indexer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>groupId：</strong>定义当前Maven项目隶属的实际项目。 首先，Maven项目和实际项目不一定是一对一的关系。 比如 SpringFramework这一实际项目，其对应的Maven项目会有很多，如spring-core、spring-context等。 这是由于Maven中模块的概念，因此，一个实际项目往往会被划分成很多模块。其次，groupId不应该对应项目隶属的组织或公司。原因很简单，一个组织下会有很多实际项目，如果groupId只定义到组织级别,而后面我们会看到artifactId只能定义Maven项目（模块），那么实际项目这个层将难以定义。 最后，groupId的表示方式与Java 包名的表示方式类似，通常与域名反向一一对应。 上面的代码中，groupId为org.sonatype.nexus，org.sonatype表示Sonatype公司建立的一个非盈利性组织，nexus表示Nexus这一实际项目，该groupId与域名 nexus.sonatype.org对应。  </p><p><strong>artifactId：</strong>该元素定义实际项目中的一个Maven项目（模块），推荐的做法是使用实际项目名称作为artifactId的前缀。比如上面的代码中的artifactId是nexus-indexer,使用了实际项目名nexus作为前缀，这样做的好处是方便寻找实际构件。在默认情况下，Ma­ven生成的构件，其文件名会以artifactId作为开头，如nexus-indexer-2.0.0.jar, 使用实际项目名称作为前缀之后，就能方便从一个lib文件夹中找到某个项目的一组构件。 考虑有5个项目，每个项目都有一个core模块，如果没有前缀，我们会行到很多core-1.2.jar这样的文件，加上实际项目名前缀之后， 便能很容易区分foo-core-1.2.jar、bar-core-1.2.jar……  </p><p><strong>version：</strong>该元素定义Maven项目当前所处的版本，如上面的代码中，nexus-indexer的版本是2.0.0。需要注意的是，Maven定义了一套完成的版本规范，以及快照(SNAPSHOT)的概念。 后面会详细讨论版本管理内容。 </p><p><strong>packaging：</strong>该元素定义Maven项目的打包方式。 首先，打包方式通常与所生成构件的文件扩展名对应，如上面的代码中packaging为jar。 最终的文件名为nexus-indexer-2.0.0.jar,而使用war打包方式的Maven项目，最终生成的构件会有一个.war文件，不过这不是绝对的。 其次，打包方式会影响到构建的生命周期，比如jar打包和war打包会使用不同的命令。最后，当不定义packaging的时候，Maven会使用默认值jar。  </p><p>­<strong>classifier：</strong>该元素用来帮助定义构建输出的一些附属构件。附属构件与主构件对应，如上例中的主构件是nexus-indexer-2.0.0.jar, 该项目可能还会通过使用一些插件生成如nexus-indexer-2.0.0-javadoc.jar、 nexus-indexer-2.0.0-sources.jar这样一些附属构件，其包含了Java文档和源代码。这时候，javadoc和sources就是这两个附属构件的classifier。这样，附属构件也就拥有了自己唯一的坐标。 还有一个关于classifier的典型例子是TestNG, TestNG的主构件是基于Java1.4平台的，而它又提供了一个clas­sifier为jdk5的附属构件。注意，不能直接定义项目的classifier, 因为附属构件不是项目直接默认生成的，而是由附加的插件帮助生成。  </p><p>上述5个元素中，groupId、artifactId、version是必须定义的，packaging是可选的（默认为jar),而classifier是不能直接定义的。  </p><p>同时，项目构件的文件名是与坐标相对应的，一般的规则为artifactId-version[-classifier].packaging, [-classifier]表示可选。比如上例nexus-indexer的主构件为nexus-indexer-2.0.0.jar,附属构件有nexus-indexer-2.0.0-javadoc.jar。 这里还要强调的一点是，packaging并非一定与构件扩展名对应，比如packaging为maven-plugin的构件扩展名为jar。</p><h3 id="account-email"><a href="#account-email" class="headerlink" title="account-email"></a>account-email</h3><p>回想在上面提到的背景案例，案例中有一个email模块负责发送账户激活的电子邮件，本节就详细阐述该模块的实现，包括POM配置、主代码和测试代码。由于该背景案例的实现是基于Spring Framework, 因此还会涉及相关的 Spring配置。</p><h4 id="account-email的POM"><a href="#account-email的POM" class="headerlink" title="account-email的POM"></a>account-email的POM</h4><div class="note warning"><p>···未完待续···</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg&quot; alt=&quot;maven&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://jingguanghui.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>《Maven实战》学习（二）</title>
    <link href="https://jingguanghui.github.io/2018/04/12/maven_2/"/>
    <id>https://jingguanghui.github.io/2018/04/12/maven_2/</id>
    <published>2018-04-12T01:35:20.000Z</published>
    <updated>2018-04-22T04:24:00.188Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg" alt="maven" style="width:100%"><br><a id="more"></a></p><h2 id="Maven使用入门"><a href="#Maven使用入门" class="headerlink" title="Maven使用入门"></a>Maven使用入门</h2><h3 id="编写POM"><a href="#编写POM" class="headerlink" title="编写POM"></a>编写POM</h3><p>Maven的核心就是pom.xml。POM(Project Object Model,项目对象模型)定义了项目的基本信息，用于描述项目如何构建，声明项目如何依赖等等。</p><p>新建一个hello-world文件夹，打开该文件夹，新建pom.xml,输入如下内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd "</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jgh.hello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码第一行是XML头，指定了该xml的版本和编码方式。</p><p>project是所有pom.xml的根元素，他声明了一些POM相关的命名空间和xsd元素。</p><p>modelVersion指定了当前POM模型的版本，对于Maven2和Maven3来说，它只能是4.0.0。</p><p>这段代码中最重要的是包含groupId、artifactId和verison三行，这三个元素定义了一个项目的基本坐标，在Maven世界中，任何的jar、pom或者war都是以基于这些基本的坐标来进行区分的。</p><p>groupId定义了项目属于哪个组，这些组往往和项目所在的公司或组织存在关联，如果你的公司是mycom,有一个项目为myapp,那么groupId就应该为com.mycom.myapp。</p><p>artifactId定义了当前Maven项目在组中的唯一Id。</p><p>version指定了Hello World项目的当前版本——1.0-SNAPSHOT。SNAPSHOT意为快照，说明该项目还处于开发中，是不稳定的版本，随着项目的发展，verison会不断更新。</p><p>name不是必须的，但推荐写上，当在MyEclipse中导入时，这个名字将作为项目名。</p><h3 id="编写主代码"><a href="#编写主代码" class="headerlink" title="编写主代码"></a>编写主代码</h3><p>项目主代码和测试代码不同，主代码会被打包到最终构件中（如jar）,而测试代码只在运行测试时用到，不会被打包。</p><p>默认情况下，Maven假设项目主代码位于src/main/java目录，我们遵循Maven的预定，创建该目录，然后在该目录下创建cn/jgh/hello/helloworld/HelloWorld.java,代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jgh.hello.helloworld;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello Maven"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.print(<span class="keyword">new</span> HelloWorld().sayHello());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于该Java代码有两点需要注意，首先，在绝大多数情况下应该把项目主代码放到src/main/java目录下（遵循Maven的约定），而无需额外的配置，Maven会自动搜寻该目录找到项目主代码。其次，包名为cn.jgh.hello.helloworld，这与之前在POM中的定义的groupId和artifactId相吻合。一般来说，项目中的Jave包都应该基于项目的groupId和artifactId，这样更加清晰，更加符合逻辑，也方便搜索构件或Java类。</p><p>在项目根目录下运行如下命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean compile</span><br></pre></td></tr></table></figure></p><p>clean告诉Maven清理输出目录target/,compile告诉Maven编译项目主代码。首先Maven执行clean任务，删除target/目录。默认情况下，Maven构建的所有输出都在target/目录下，执行compile任务，将项目主代码编译至target/classes目录中（编译好的类为：cn/jgh/hello/helloworld/HelloWorld.class）</p><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p>为了使项目结构保持清晰，主代码与测试代码应该分别位于独立的目录中。</p><p>Maven项目中，默认的测试代码目录是src/test/java,因此，在编写测试用例之前，应该先创建该目录。</p><p>在Java世界中，一般使用JUnit进行单元测试，要使用JUnit,首先需要为Hello World项目添加一个JUnit依赖，修改项目的POM如下代码所示:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd "</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jgh.hello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码中添加了dependencies元素，该元素下可包含多个dependency元素以声明项目的依赖。有了JUnit这段声明，Maven就会自动下载junit-4.7.jar。Maven从哪里下载这些Jar呢？在Maven之前，可以去JUnit的官方网站下载分发包，有了Maven，他会自动访问<a href="https://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">Maven中央仓库</a>，下载需要的文件。我们也可以自己访问该仓库，打开路径junit/junit/4.7/，就可以看到junit-4.7.jar和junit-4.7.pom。</p><p>代码中scope为依赖范围，若依赖范围为test，则表示该依赖只对测试有效。换句话说，测试代码中的import Junit代码是没问题的，但是在主代码中用import Junit代码，就会造成编译错误。如果不声明依赖范围，则默认值为compile，表示该依赖对主代码和测试代码均有效。</p><p>接下来编写测试类，来验证上面编写的Jave类的sayHello()方法是否能在控制台输出“Hello Maven”。在src/test/java目录下创建文件，其内容如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jgh.hello.helloworld;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">HelloWorld helloWorld=<span class="keyword">new</span> HelloWorld();</span><br><span class="line">System.out.println(helloWorld.sayHello());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个典型的单元测试包含三个步骤：</p><ol><li>准备测试类及数据</li><li>执行要测试的行为</li><li>检查结果</li></ol><p>同时，在JUnit4中，需要执行的测试方法都应该以<strong>@Test</strong>进行标注。</p><p>测试用例编写完毕后就可以在项目根目录下调用Maven执行以下命令，进行测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean test</span><br></pre></td></tr></table></figure></p><p>命令行输入的是mvn clean test,而maven执行的可不止这两个任务，在执行test之前，它会先自动执行项目的主资源处理、主代码编译、测试资源处理、测试代码编译等工作，这是Maven生命周期的一个特性，关于Maven的生命周期，后面将会看到。</p><p>Maven从中央仓库下载了junit4.7.pom和junit4.7.jar这两个文件到本地仓库中（~/.m2/reposity）中，供所有的Maven项目使用。</p><p>如果控制台最后输出如下类似代码，则说明测试通过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running cn.jgh.hello.helloworld.HelloWorldTest</span><br><span class="line">Hello Maven</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><h3 id="打包和运行"><a href="#打包和运行" class="headerlink" title="打包和运行"></a>打包和运行</h3><p>Hello World的POM中没有指定打包类型，使用默认的打包类型jar。简单地在项目根目录下调用以下命令进行打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></p><p>可以看到类似如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running cn.jgh.hello.helloworld.HelloWorldTest</span><br><span class="line">Hello Maven</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.048 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line">···</span><br><span class="line">[INFO] Building jar: E:\mavenLearn\hello-world\target\hello-world-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 10.205 s</span><br><span class="line">[INFO] Finished at: 2018-04-12T15:00:34+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><p>类似地Maven会在打包之前进行编译、测试等操作。打包之后的文件也位于target/输出目录下，文件名为hello-world-1.0-SNAPSHOT.jar，它是根据artifact-version.jar规则进行命名的。如果有需要，就可以复制这个jar文件到其他项目的classpath中从而使用HelloWorld类。</p><p>如果要让其他Maven项目直接引用这个jar呢？还需要一个步骤，在项目根目录下执行以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure></p><p>可以看到类似如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">[INFO] Installing E:\mavenLearn\hello-world\target\hello-world-1.0-SNAPSHOT.jar t</span><br><span class="line">epository\cn\jgh\hello\hello-world\1.0-SNAPSHOT\hello-world-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] Installing E:\mavenLearn\hello-world\pom.xml to C:\Users\Administrator\.m2</span><br><span class="line">-world\1.0-SNAPSHOT\hello-world-1.0-SNAPSHOT.pom</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 27.854 s</span><br><span class="line">[INFO] Finished at: 2018-04-12T15:19:03+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><p>同样地，在执行install之前，会执行删除target/,编译，测试和打包等操作。从输出结果中可以看出，install将项目输出的jar包安装到了Maven本地仓库中，可以打开相应的文件夹看到Hello World项目的pom和jar文件。只要将Hello World的构件安装到本地仓库之后，其他的Maven项目就可以使用它。</p><p>因为Hello World类是有一个main方法的，所以是可以运行的，但是默认打包成的jar是不能直接运行的，因为带有main方法的信息不会添加到manifest中(打开jar文件的META-INF/MANIFEST.MF文件，将无法看到Main-Class一行)。我们可以手动添加如下代码到jar文件的META-INF/MANIFEST.MF文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Main-Class: cn.jgh.hello.helloworld.HelloWorld</span><br></pre></td></tr></table></figure></p><p>需要注意的是，Main-Class:之后是一个英文状态下的空格</p><p>然后，在项目根目录下运行以下代码执行jar文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target\hello-world-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p><p>控制台输出Hello Maven,这正是我们想要的。</p><h3 id="使用Archetype生成项目骨架"><a href="#使用Archetype生成项目骨架" class="headerlink" title="使用Archetype生成项目骨架"></a>使用Archetype生成项目骨架</h3><p>离开当前目录另建一个项目，来测试Maven提供的Archetype帮助我们快速勾勒出项目骨架。</p><p>在新建的目录下，运行以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br></pre></td></tr></table></figure></p><p>接下来将看到一段长长的输出，有很多可用的Archetype可供选择。每一个Archetype前面都会对应一个编号，同时命令行将会提示一个默认的编号，其对应的Archetype为maven-archetype-quickstart,直接回车以选择该Archetype,紧接着Maven会提示要输入项目的groupId、artifactId、version、以及包名package。如下输入并确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Define value for property &apos;groupId&apos;: cn.jgh.maven</span><br><span class="line">Define value for property &apos;artifactId&apos;: hello-world</span><br><span class="line">Define value for property &apos;version&apos; 1.0-SNAPSHOT: :</span><br><span class="line">Define value for property &apos;package&apos; cn.jgh.maven: : cn.jgh.maven.helloworld</span><br><span class="line">Confirm properties configuration:</span><br><span class="line">groupId: cn.jgh.maven</span><br><span class="line">artifactId: hello-world</span><br><span class="line">version: 1.0-SNAPSHOT</span><br><span class="line">package: cn.jgh.maven.helloworld</span><br><span class="line"> Y: : Y</span><br></pre></td></tr></table></figure></p><p>Archetype插件将根据我们提供的信息创建项目骨架。在当前目录下，Archetype插件会创建一个名为hello-world（根据我们定义的artifactId）的子目录，从中可以看到项目的基本结构：基本的pom.xml已经被创建，里面包含了必要的信息以及一个junit依赖；主代码目录src/main/java，在该目录下还有一个Java类cn.jgh.maven.helloworld.APP,同时测试代码目录src/test/java也已经被创建好,并且包含一个测试用例cn.jgh.maven.helloworld.APPTest。</p><p>Archetype可以帮助我们迅速地构建起项目的骨架，在以后的开发中我们就可以使用此种方法生成骨架，然后在此骨架的基础上开发项目以节省大量时间。</p><h3 id="m2eclipse的简单使用"><a href="#m2eclipse的简单使用" class="headerlink" title="m2eclipse的简单使用"></a>m2eclipse的简单使用</h3><h4 id="导入maven项目"><a href="#导入maven项目" class="headerlink" title="导入maven项目"></a>导入maven项目</h4><ol><li>选择菜单项File-&gt;选择Import</li><li>在Import对话框中选择Maven4MyEclipse下的Existing Maven Projects，然后单击next按钮</li><li>在Impott Maven Projects对话框中单击Browse按钮选择Hello World的根目录（即包含pom.xml文件的那个目录）</li><li>单击Finish按钮之后，就会将项目导入到当前的workspace中了</li></ol><p>在Package Explore视图中,可以看到主代码目录结构src/main/java和测试代码目录结构src/test/java成了    MyEclipse中的资源目录，当然pom.xml永远在根目录下，还可以看到项目的依赖junit-4.7.jar,其实际位置指向了指向了Maven本地仓库。</p><h4 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h4><ol><li>选择菜单项File-&gt;New-&gt;Other</li><li>在弹出的对话框中选择Maven4MyEclipse下的Maven Project,然后单击Next按钮</li><li>在弹出的窗口中默认的选项，单击Next按钮</li><li>此时会提示我们选择一个ArcheType，这里选择maven-archetype-quickstart插件创建项目，因此这一步骤和上一节使用的Archetype创建项目骨架类似，输入groupId、artifactId、version、package</li><li>输入完毕后，单击Finish按钮，Maven项目就创建完成了</li></ol><h4 id="运行Maven命令"><a href="#运行Maven命令" class="headerlink" title="运行Maven命令"></a>运行Maven命令</h4><p>在Maven项目或者pom.xml上右击，在弹出的快捷菜单中选择Run As，就能看到常见的Maven命令。选择想要执行的命令，就能执行相应的构件，同时还能在MyEclipse控制台看到构建输出。</p><p>可以看到Run As右边没有我们想要的命令，比如maven clean test,我们可以选择Maven build以自定义Maven运行命令,在弹出对话框的Goals一项中输入我们想要执行的命令，如clean test,设置一下Name,单击Run即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg&quot; alt=&quot;maven&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://jingguanghui.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>《Maven实战》学习（一）</title>
    <link href="https://jingguanghui.github.io/2018/04/11/maven_1/"/>
    <id>https://jingguanghui.github.io/2018/04/11/maven_1/</id>
    <published>2018-04-11T05:08:20.000Z</published>
    <updated>2018-04-22T04:24:00.188Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg" alt="maven" style="width:100%"><br><a id="more"></a></p><h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><h3 id="何为Maven？"><a href="#何为Maven？" class="headerlink" title="何为Maven？"></a>何为Maven？</h3><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</p><h3 id="为什么要用Maven？"><a href="#为什么要用Maven？" class="headerlink" title="为什么要用Maven？"></a>为什么要用Maven？</h3><p>Maven能够帮助我们自动化构建过程，从清理、编译、测试到生成报告，再到打包和部署。</p><p>Maven是跨平台的，这意味着无论在Windows、Linux还是Mac上都可以使用相同的命令。</p><p>Maven最大化地消除了构建的重复，抽象了构建生命周期，并且为绝大部分的构建任务提供了插件，我们不需要实现过程，甚至不再需要去实现这些过程中的一些任务。最简单的例子就是测试，我们没必要告诉Maven去测试，更不需要告诉Maven如何运行测试，只需要遵循Maven的约定编好测试用例，当我们运行构建的时候，这些测试便会自动运行。</p><p>Maven不仅是构建工具，还是一个依赖管理工具和项目信息管理工具。它提供中央仓库，能帮我们自动下载构件。</p><h2 id="Maven的安装和配置"><a href="#Maven的安装和配置" class="headerlink" title="Maven的安装和配置"></a>Maven的安装和配置</h2><h3 id="在Windows上安装Maven"><a href="#在Windows上安装Maven" class="headerlink" title="在Windows上安装Maven"></a>在Windows上安装Maven</h3><h4 id="检查JDK的安装"><a href="#检查JDK的安装" class="headerlink" title="检查JDK的安装"></a>检查JDK的安装</h4><p>Maven可以运行在JDK1.4及以上版本。</p><p>打开命令行，输入以下命令来检查JDK安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo %JAVA_HOME%</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="Maven下载"><a href="#Maven下载" class="headerlink" title="Maven下载"></a>Maven下载</h4><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven下载地址</a>,Windows下是zip文件，如apache-maven-3.5.3-bin.zip。</p><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>在指定的目录中运行以下命令将安装文件解压到当前目录（如D:\Maven）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Maven&gt;jar xvf &quot;D:\Downloads\apache-maven-3.5.3-bin.zip&quot;</span><br></pre></td></tr></table></figure></p><p>设置环境变量，将Maven安装配置到操作系统中：</p><ol><li>右击“计算机”-&gt;“属性”-&gt;“高级系统设置”-&gt;”环境变量”；</li><li>在<strong>系统变量</strong>中新建一个变量，变量名为“M2_HOME”,变量值为Maven的安装目录D:\Maven\apache-maven-3.5.3，单击‘确定’按钮；</li><li>在<strong>系统变量</strong>中找到Path变量，双击Path变量，在变量值末尾添加%M2_HOME%\bin;，（多个值之间用英文分号（;）隔开），单击‘确定’按钮。</li></ol><div class="note danger no-icon"><p>值得注意的是Path环境变量。当我们在cmd中执行命令行时，Windows首先会在当前目录中寻找可执行的脚本或文件，如果没找到，Windows会接着遍历环境变量Path中定义的路径。</p></div>打开一个新的命令行窗口，执行以下命令验证Maven是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><br><br>执行以上之后命令出现类似如下结果，则说明安装成功<div class="note success"><p>Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)<br>Maven home: D:\Maven\apache-maven-3.5.3\bin..<br>Java version: 1.8.0_144, vendor: Oracle Corporation<br>Java home: D:\Java\jdk1.8.0_144\jre<br>Default locale: zh_CN, platform encoding: GBK<br>OS name: “windows 7”, version: “6.1”, arch: “amd64”, family: “windows”<br></p></div><h4 id="升级Maven"><a href="#升级Maven" class="headerlink" title="升级Maven"></a>升级Maven</h4><p>只需要把新下载下来的文件解压到文件目录中，然后替换掉系统变量M2_HOME的变量值即可。</p><h3 id="在基于UNIX的系统上安装Maven"><a href="#在基于UNIX的系统上安装Maven" class="headerlink" title="在基于UNIX的系统上安装Maven"></a>在基于UNIX的系统上安装Maven</h3><h4 id="检查JDK的安装-1"><a href="#检查JDK的安装-1" class="headerlink" title="检查JDK的安装"></a>检查JDK的安装</h4><p>打开命令行，输入以下命令来检查JDK安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo %JAVA_HOME%</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="Maven下载-1"><a href="#Maven下载-1" class="headerlink" title="Maven下载"></a>Maven下载</h4><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven下载地址</a>,UNIX下是tar.gz文件，如apache-maven-3.5.3-bin.tar.gz。</p><h4 id="本地安装-1"><a href="#本地安装-1" class="headerlink" title="本地安装"></a>本地安装</h4><p>在指定的目录中运行以下命令将安装文件解压到当前目录（如D:\Maven）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Maven&gt;tar-xvzf &quot;D:\Downloads\apache-maven-3.5.3-bin.tar.gz&quot;</span><br></pre></td></tr></table></figure></p><p>现在已经创建好了一个Maven安装目录apache-maven-3.5.3，虽然直接使用该目录配置环境后就能使用Maven了，但这里推荐的做法是，在安装目录旁平行地创建一个符号链接，以便日后的升级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln-s apache-maven-3.5.3 apache-maven</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls-l</span><br></pre></td></tr></table></figure><p>接下来，设置M2_HOME环境变量指向符号链接apache-maven,并且把Maven安装目录下的bin/文件添加到系统环境变量PATH中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export M2_HOME=/home/juven/bin/apache-maven</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$ PATH: $ M2-HOME/bin</span><br></pre></td></tr></table></figure><p>运行以下命令检查Maven是否安装成功</p><pre><code>mvn -v</code></pre><h3 id="安装目录分析"><a href="#安装目录分析" class="headerlink" title="安装目录分析"></a>安装目录分析</h3><h4 id="M2-HOME"><a href="#M2-HOME" class="headerlink" title="M2_HOME"></a>M2_HOME</h4><p>M2_HOME即Maven的安装目录，例如D:\Maven\apache-maven-3.5.3。</p><ol><li>bin 该目录包含了mvn运行的脚本，这些脚本用来配置Java命令，准备好classpath和相关的Java系统属性，然后执行Java命令。</li><li>boot 该目录下只有一个文件，对于一般的Maven用户，不用关心该文件</li><li>conf 该目录下包含一个重要的文件settings.xml，后面会多次介绍该文件</li><li>lib 该目录包含了所有Maven运行的Java类库，用户还可以</li><li>LICENSE.txt记录了Maven使用的软件许可证Apache License Version2.0</li><li>NOTICE.txt记录了Maven包含的第三方软件</li><li>README.txt包含了Maven的简要介绍，以及安装需求和如何安装的简要指令</li></ol><h4 id="m2"><a href="#m2" class="headerlink" title="~/.m2"></a>~/.m2</h4><p>在命令行窗口中执行mvn help:system（非必须）,然后可以在用户目录中（例如：C:\Users\Administrator）看到生成的.m文件夹，默认情况下，该文件夹下放置了Maven本地仓库.m2/repository。所有的Maven构件都被存储到该仓库中，以方便重用。</p><h3 id="maven安装最佳实践"><a href="#maven安装最佳实践" class="headerlink" title="maven安装最佳实践"></a>maven安装最佳实践</h3><h4 id="设置MAVEN-OPTS环境变量"><a href="#设置MAVEN-OPTS环境变量" class="headerlink" title="设置MAVEN_OPTS环境变量"></a>设置MAVEN_OPTS环境变量</h4><p>通常设置MAVEN_OPTS的值为-Xms128m -Xmx512m,因为Java默认的最大可用内存往往不能满足Maven运行的需要,容易得到java.lang.OutofMemeoryError,所以一开始就配置是推荐的做法。</p><p>关于如何设置环境变量，请参考前面设置M2_HOME环境变量的做法，尽量不要直接修改mvn.bat或者mvn这两个Maven执行脚本文件。因为如果修改了脚本文件，升级Maven时就不得不再次去修改，同理，应该尽可能地不去修改Maven安装目录下的任何文件。</p><h4 id="配置用户范围的settings-xml"><a href="#配置用户范围的settings-xml" class="headerlink" title="配置用户范围的settings.xml"></a>配置用户范围的settings.xml</h4><p>用户可以选择配置M2_HOME/conf/settings,xml或者~/.m2/settings.xml。前者是全局范围的，整台机器上的用户都会受到该配置的影响，而后者是用户范围的，只有当前用户才会受到该配置的影响。</p><p>推荐使用用户范围的settings.xml,一方面既不影响其他用户，另一方面升级之后也不用替换新升级文件夹下的settings.xml。</p><h4 id="不要使用IDE内嵌的Maven"><a href="#不要使用IDE内嵌的Maven" class="headerlink" title="不要使用IDE内嵌的Maven"></a>不要使用IDE内嵌的Maven</h4><p>一般情况下，IDE内嵌的Maven通常都比较新，但不一定很稳定，而且往往和命令行使用的Maven不是同一个版本。这里又出现两个潜在的问题：首先，较新版本的Maven存在很多不稳定因素，容易造成一些难以理解的问题；其次，除了IDE，还经常会使用命令行的Maven,如果版本不一致，则容易造成构件行为的不一致。所以，应该在IDE中配置Maven插件，使用与命令行一致的Maven。</p><p>在MyEclipse中，单击菜单栏中的Window,选择Preferences,在左边菜单栏中，单击MyEclipse,然后单击Maven4MyEclipse,选择Installation子项，在右边的画板中，能够看到有一个默认的Embedded Maven安装被选中了。单击Add…按钮，然后选择Maven安装目录M2_HOME，添加完毕之后勾选这一外部的Maven</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg&quot; alt=&quot;maven&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://jingguanghui.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Tools</title>
    <link href="https://jingguanghui.github.io/2018/04/11/tools/"/>
    <id>https://jingguanghui.github.io/2018/04/11/tools/</id>
    <published>2018-04-11T03:28:02.000Z</published>
    <updated>2018-05-17T15:22:08.434Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/business-computer-connection-270640.jpg" alt="tools" style="width:100%"><br><a id="more"></a></p><p><div class="note info"><p>工欲善其事，必先利其器</p></div></p><h2 id="PDF阅读器"><a href="#PDF阅读器" class="headerlink" title="PDF阅读器"></a>PDF阅读器</h2><p>小巧好用的PDF阅读器：<a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="noopener">SumatraPDF下载</a></p><p><a href="https://www.cnblogs.com/tsingke/p/6436017.html" target="_blank" rel="noopener">SumatraPDF快捷键</a></p><h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><p>所写即所得：<a href="http://markdownpad.com/download.html" target="_blank" rel="noopener">MarkdownPad下载</a></p><p>注册码</p><p>User：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Soar360@live.com</span><br></pre></td></tr></table></figure><p>授权：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure></p><h2 id="高清图库"><a href="#高清图库" class="headerlink" title="高清图库"></a>高清图库</h2><p><a href="https://zhuanlan.zhihu.com/p/23411438" target="_blank" rel="noopener">10 个免费的高清图库网站，强烈推荐☞☞☞</a></p><h2 id="lrc歌词下载"><a href="#lrc歌词下载" class="headerlink" title="lrc歌词下载"></a>lrc歌词下载</h2><p><a href="http://www.lrcgc.com/" target="_blank" rel="noopener">lrc歌词下载</a></p><h2 id="视频播发器"><a href="#视频播发器" class="headerlink" title="视频播发器"></a>视频播发器</h2><p>低内存占用、无广告、功能强大又唯美的本地播放器<a href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener">PotPlayer</a></p><h2 id="技术书单"><a href="#技术书单" class="headerlink" title="技术书单"></a>技术书单</h2><p><a href="http://blog.jobbole.com/106093/" target="_blank" rel="noopener">如果有人让你推荐编程技术书，请叫他看这个列表</a></p><h2 id="脚本工具"><a href="#脚本工具" class="headerlink" title="脚本工具"></a>脚本工具</h2><p><a href="https://sleazyfork.org/zh-CN" target="_blank" rel="noopener">老司机开车脚本</a></p><p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">一些实用的脚本</a></p><h2 id="网站导航"><a href="#网站导航" class="headerlink" title="网站导航"></a>网站导航</h2><p><a href="http://ilxdh.com/" target="_blank" rel="noopener">龙轩导航</a></p><p><a href="http://so.byr.wiki/" target="_blank" rel="noopener">一个框，全能搜</a></p><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><p><a href="http://listen1.github.io/listen1/" target="_blank" rel="noopener">音乐</a></p><h2 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h2><p>SecureCRT是一款支持SSH（SSH1和SSH2）的终端仿真程序，简单地说是Windows下登录UNIX或Linux服务器主机的软件。</p><p><a href="https://pan.baidu.com/s/1w8WroTIynquAwYBTEfnLpw" target="_blank" rel="noopener">SecureCRT下载</a></p><p>提取密码：02mc</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/business-computer-connection-270640.jpg&quot; alt=&quot;tools&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://jingguanghui.github.io/categories/Tool/"/>
    
    
      <category term="工具" scheme="https://jingguanghui.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="PDF" scheme="https://jingguanghui.github.io/tags/PDF/"/>
    
      <category term="图库" scheme="https://jingguanghui.github.io/tags/%E5%9B%BE%E5%BA%93/"/>
    
      <category term="Markdown" scheme="https://jingguanghui.github.io/tags/Markdown/"/>
    
      <category term="视频播放器" scheme="https://jingguanghui.github.io/tags/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>3344——Forever</title>
    <link href="https://jingguanghui.github.io/2018/04/09/friends/"/>
    <id>https://jingguanghui.github.io/2018/04/09/friends/</id>
    <published>2018-04-09T14:14:48.000Z</published>
    <updated>2018-04-11T13:34:18.152Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/hexo-next-optimization-title.jpg" alt="朋友" style="width:100%"><br><a id="more"></a><br>        <div id="aplayer-AODgDVea" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-AODgDVea"),            narrow: false,            autoplay: true,            showlrc: 3,            music: {              title: "朋友",              author: "龙井说唱",              url: "http://p6v6hsmcp.bkt.clouddn.com/%E9%BE%99%E4%BA%95%E8%AF%B4%E5%94%B1%20-%20%E6%9C%8B%E5%8F%8B.mp3",              pic: "http://p6v6hsmcp.bkt.clouddn.com/timg%20%286%29.jpg",              lrc: "http://p6v6hsmcp.bkt.clouddn.com/%E9%BE%99%E4%BA%95%E8%AF%B4%E5%94%B1-%E6%9C%8B%E5%8F%8B.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script></p><div class="note info"><p>人之间的友谊，并非由于说不尽的好处，倒是说不出的要好。  ——钱钟书</p></div>为什么要引用钱钟书先生说的话呢，因为我不知道该怎么开头。就算是引用了又怎么样呢，我还是不知道写什么。如果让我在写文章和吃屎之间做个选择的话，我会毫不犹豫的选择写文章(&gt;▽&lt;)。<br><br>写这篇文章是为了感谢3344的兄弟姐妹们对我个人博客的支持和鼓励，也纪念3344的我们在一起九年了。在这里首先谢谢秀梅，许浩和秀才的红包，在我装逼的时候给我捧场，谢谢你们，么么哒。<br><br>说实在的，这个年龄写这个有点矫情了，但谁在乎呢（道系还是佛系？）。2009年，很荣幸的把我分到了0830班，又阴差阳错的进了3344寝室 ，确认过眼神，我遇到对的人，嗯，这些都是对的人。<br><h4>彦武</h4>彦武，我的老大哥，我们认识已经十一年了，本来想送你一首《十一年》呢，但是我忍住了(认真脸)。接下来的五一就是你的大喜日子了，小弟在这里祝你和浏阳百年好合，早生贵子，我还等着当叔叔呢。<br>最后，一首歌送给你们。<br>        <div id="aplayer-QLKJlRki" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-QLKJlRki"),            narrow: false,            autoplay: false,            showlrc: 3,            music: {              title: "给你们",              author: "张宇",              url: "http://p6v6hsmcp.bkt.clouddn.com/%E5%BC%A0%E5%AE%87%20-%20%E7%BB%99%E4%BD%A0%E4%BB%AC.mp3",              pic: "http://p6v6hsmcp.bkt.clouddn.com/u=3963152680,1514268489&fm=27&gp=0.jpg",              lrc: "http://p6v6hsmcp.bkt.clouddn.com/%E5%BC%A0%E5%AE%87-%E7%BB%99%E4%BD%A0%E4%BB%AC.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><br><h4>东升</h4>东升，人生赢家，把大家的秀梅拐走了，我就不谴责你了，因为我估计还排不上队，就留给他们谴责吧，哈哈。<br>说点正事，赶紧和秀梅把证领了，把事办了，大家还都等着喝喜酒呢。<br><h4>壮</h4>壮，当爹的人了，大家的表率，在幸福的道路上已经超越了我们一圈，也是我们走向人生幸福道路的领头羊。说这么多，其实是想让你传授一下经验，带领以许浩为代表的单身狗们早日走向人生巅峰。毕竟以你这模样还能娶到嫂子这么漂亮贤惠的姑娘，大概是情圣了吧。<br>说你丑，十一长大不会打我吧。<br><h4>扬飞</h4>扬飞，我们的曹老师。自从你当了老师之后，让我对老师有了从新的认识，原来人还可以这么衣冠禽兽。当然了，也谢谢你带我认识了另外一位老师，苍老师，我和她已经好久没联系了，不知道你还能牵上线吗？<br>最后，祝艳彩你俩早点办事。<br><h4>秀才</h4>秀才，一个假的印度人。只想告诉你，在广西那边少嫖点娼。你这人渣不如的东西，你对的起你的家人吗？你对的起你自己的良心吗？你自己想想。不是我骂你，你就知道享受她们的肉体，可是你有没有想过你的家人，你未来的女朋友，你简直就是畜生。<br>我不想多说，只想对你说，下次再有这种事发生，请带上我，知道吗？保持联络！<br><h4>孙宽</h4>孙宽，我们唯一的研究生。多吃点饭，把自己养胖了，还有赶紧给我找个嫂子，不要搞基。<br><h4>许浩</h4>许浩，哥哥。人到中年不得已，保温杯里泡枸杞。多锻炼身体，看你虚的，这几天是不是又病了，还记得你曾经是多么的猛男吗？最近，看你在微信运动里，一天天的占领我的朋友圈，感到压力的同时，也感觉那个猛男要回来了。<br>加油吧哥哥，早日给我找个嫂子。<br><h4>胡</h4>胡，同样的人生赢家，曾经那个带我打英雄联盟的小胖子（并不是个子低，只是胖的不明显），现在也已经结婚了，走在了人生幸福的道路上。<br>最后，祝督京老师你俩早生贵子。<br><h4>秀梅</h4>秀梅，我们的大妹妹。为什么你和东升在一块了还要单列出来呢，可能是我受了贿赂吧。<br>赶紧和东升把事办了，看好你们哦。<br><h4>小明</h4>小明，我们的小妹妹，一个开了挂的人。赶紧给我们找个妹夫，单身这么多年，你不着急，我们还着急呢。不要怕他欺负你，毕竟你哥哥那么多不是。<br><br><div class="note warning"><p>在一块的就不单独列出来了，在这里再一次祝你们百年好合（当然也包括东升和秀梅哈）。</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/hexo-next-optimization-title.jpg&quot; alt=&quot;朋友&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="friends" scheme="https://jingguanghui.github.io/categories/friends/"/>
    
    
      <category term="friends" scheme="https://jingguanghui.github.io/tags/friends/"/>
    
      <category term="friendship" scheme="https://jingguanghui.github.io/tags/friendship/"/>
    
  </entry>
  
  <entry>
    <title>这一碗好喝的鸡汤</title>
    <link href="https://jingguanghui.github.io/2018/04/06/chicken-soup/"/>
    <id>https://jingguanghui.github.io/2018/04/06/chicken-soup/</id>
    <published>2018-04-06T11:07:03.000Z</published>
    <updated>2018-04-11T13:34:18.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/tiger-2430625_1280.jpg" alt="朋友" style="width:100%"><br><a id="more"></a></p><div class="note primary"><p>比三观更重要的是<br> 五官</p></div><!----><div class="note primary"><p>你无法叫醒一个不回你消息的人<br>但是红包能</p></div><!----><div class="note primary"><p>不要看别人表面上一帆风顺<br>实际上<br>他们背地里也一帆风顺</p></div><!----><div class="note primary"><p>有的时候<br>哭也是可以解决问题的<br>只要你长得足够漂亮</p></div><!----><div class="note primary"><p>你全力做到最好<br>还不如别人随便搞搞</p></div><!----><div class="note primary"><p>生活不止眼前的苟且<br>还有前任发来的请帖</p></div><!----><div class="note primary"><p>我妈常跟我说<br>找对象的时候<br>不要光看别人的外表<br>也要看看自己的外表</p></div><!----><div class="note primary"><p>如果可以的话<br>请好好爱自己<br>因为这个世界上没人会爱你</p></div><!----><div class="note primary"><p>有的时候你不努力一下<br>还真的不知道什么是绝望</p></div><!----><div class="note primary"><p>所有的事情<br>都会<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>好起来的</p></div><!----><div class="note primary"><p>我真的不懂<br>为什么我那么穷<br>还能吃那么胖</p></div><!----><div class="note primary"><p>你们之所以喝鸡汤<br>是因为<br>肉被别人吃了</p></div><!----><div class="note primary"><p>努力不一定会成功<br>但是不努力<br>一定会很轻松</p></div><!----><div class="note primary"><p>有人出现在你的生命里<br>就是为了告诉你<br>你真好骗</p></div><!----><div class="note primary"><p>你以为有钱人他就很快乐吗<br>他们的快乐你都想象不到</p></div><!----><div class="note primary"><p>喜欢一个人就去表白<br>万一成备胎了呢</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/tiger-2430625_1280.jpg&quot; alt=&quot;朋友&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://jingguanghui.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://jingguanghui.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>First Blog</title>
    <link href="https://jingguanghui.github.io/2018/04/05/hello-world/"/>
    <id>https://jingguanghui.github.io/2018/04/05/hello-world/</id>
    <published>2018-04-05T11:07:03.000Z</published>
    <updated>2018-04-12T13:46:44.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/alphabets-colors-creativity-954599.jpg" alt="Hello" style="width:100%"><br><a id="more"></a><br>        <div id="aplayer-gWWrceJC" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-gWWrceJC"),            narrow: false,            autoplay: true,            showlrc: 3,            music: {              title: "Hello",              author: "Adele",              url: "http://p6v6hsmcp.bkt.clouddn.com/Adele%20-%20Hello.mp3",              pic: "http://p6v6hsmcp.bkt.clouddn.com/u=3529119121,1423376518&fm=27&gp=0.jpg",              lrc: "http://p6v6hsmcp.bkt.clouddn.com/Adele-Hello.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><br>欢迎来到我的个人博客 <a href="https://jingguanghui.github.io/">一个好人</a>! 这是我的第一篇博客，说实话我不知道写些什么，但俗话说：</p><div class="note info"><p>万事开头难，然后中间难，然后结尾难。</p></div><p>嗯，就是这样，激励着我写下这第一篇博客。</p><h2 id="5W1H分析"><a href="#5W1H分析" class="headerlink" title="5W1H分析"></a>5W1H分析</h2><h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><div class="note success"><p>可能是为了装逼吧，也可能是为了记录些什么，我还分不清楚两者的区别。</p></div><h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><div class="note success">写博客<p></p></div><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><div class="note success">家里or公司<p></p></div><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><div class="note success">空闲的时候<p></p></div><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><div class="note success">当然是我了，难道是别人不成<p></p></div><h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><div class="note success">用电脑写吧，这个好像还挺难的（认真脸）<p></p></div><p>最后分享一篇最近在知乎上看到的一篇文章，<a href="https://www.zhihu.com/question/43607087/answer/320484467" target="_blank" rel="noopener">人是怎么废掉的？</a>算是给自己提个醒吧~(≧▽≦)/！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/alphabets-colors-creativity-954599.jpg&quot; alt=&quot;Hello&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://jingguanghui.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://jingguanghui.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="https://jingguanghui.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
