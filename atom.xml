<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个好人</title>
  
  <subtitle>这世上天才很少，懒蛋却很多，你若对得起时间，时间便对得起你！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jingguanghui.github.io/"/>
  <updated>2018-05-16T15:33:01.287Z</updated>
  <id>https://jingguanghui.github.io/</id>
  
  <author>
    <name>景光辉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux入门（一）初始Linux</title>
    <link href="https://jingguanghui.github.io/2018/05/16/Linux_1/"/>
    <id>https://jingguanghui.github.io/2018/05/16/Linux_1/</id>
    <published>2018-05-16T12:50:20.000Z</published>
    <updated>2018-05-16T15:33:01.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/linux.jpg" alt="Linux" style="width:100%"><br><a id="more"></a></p><h2 id="操作系统的发展史"><a href="#操作系统的发展史" class="headerlink" title="操作系统的发展史"></a>操作系统的发展史</h2><h3 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h3><p>1965年之前的时候，电脑并不像现在一样普遍，它可不是一般人能碰的起的，除非是军事或者学院的研究机构，而且当时大型主机至多能提供30台终端（30个键盘、显示器)，连接一台电脑。<br><img src="http://p6v6hsmcp.bkt.clouddn.com/Unix.png" alt="Unix" style="width:100%"></p><p>为了解决数量不够用的问题,1965年左右由贝尔实验室、麻省理工学院以及通用电气共同发起了Multics项目，想让大型主机支持300台终端。</p><p>1969年前后这个项目进度缓慢，资金短缺，贝尔实验室退出了研究。</p><p>1969年从这个项目中退出的Ken Thompson当时在实验室无聊时，为了让一台空闲的电脑上能够运行“星际旅行”游行，在8月份左右趁着其妻子探亲的时间，用了1个月的时间 编写出了Unix操作系统的原型。</p><p>1970年，美国贝尔实验室的Ken Thompson，以BCPL语言为基础，设计出很简单且很接近硬件的B语言（取BCPL的首字母），并且他用B语言写了第一个Unix操作系统。</p><p>因为B语言的跨平台性较差，为了能够在其他的电脑上也能够运行这个非常棒的Unix操作系统，Dennis Ritchie和Ken Thompson从B语言的基础上准备研究一个更好的语言。</p><p>1972年，美国贝尔实验室的Dennis Ritchie在B语言的基础上最终设计出了一种新的语言，他取了BCPL的第二个字母作为这种语言的名字，这就是C语言。</p><p>1973年初，C语言的主体完成。Thompson和Ritchie迫不及待地开始用它完全重写了现在大名鼎鼎的Unix操作系统。</p><h3 id="Minix"><a href="#Minix" class="headerlink" title="Minix"></a>Minix</h3><p>因为AT&amp;T(通用电气)的政策改变，在Version7 Unix推出之后，发布新的使用条款，将Unix源代码私有化，在大学中不再能使用Unix源代码。AndrewS.Tanenbaum(塔能鲍姆)教授为了能在课堂上教授学生操作系统运作的实务细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统，以避免版权上的争议。他以小型Unix（mini-UNIX）之意，将它称为Minix。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>因为Minix只是教学使用，因此功能并不强，因此Torvalds利用GNU的bash当做开发环境，gcc当做编译工具，编写了Linux内核-v0.02，但是一开始Linux并不能兼容Unix，即Unix上跑的应用程序不能在Linux上跑，即应用程序与内核之间的接口不一致，因为Unix是遵循POSIX规范的，因此Torvalds修改了Linux，并遵循POSIX（Portable Operating System Interface，他规范了应用程序与内核的接口规范）； 一开始Linux只适用于386，后来经过全世界的网友的帮助，最终能够兼容多种硬件。</p><h3 id="操作系统的发展"><a href="#操作系统的发展" class="headerlink" title="操作系统的发展"></a>操作系统的发展</h3><p>Unix和Linux的应用范围<br><img src="http://p6v6hsmcp.bkt.clouddn.com/os.gif" alt="Unix" style="width:100%"><br>Linux的应用领域<br><img src="http://p6v6hsmcp.bkt.clouddn.com/os1.png" alt="Unix" style="width:100%"><br>ios的来源<br><img src="http://p6v6hsmcp.bkt.clouddn.com/os2.png" alt="Unix" style="width:100%"></p><h3 id="Minix没有火起来的原因"><a href="#Minix没有火起来的原因" class="headerlink" title="Minix没有火起来的原因"></a>Minix没有火起来的原因</h3><blockquote><p>Minix的创始人说，Minix3没有统治世界是源于他在1992年犯下的一个错误，当时他认为BSD必然会一统天下，因为它是一个更稳定和更成熟的系统，其它操作系统难以与之竞争。因此他的Minix的重心集中在教育上。四名BSD开发者已经成立了一家公司销售BSD系统，他们甚至还有一个有趣的电话号码1-800-ITS-UNIX。然而他们正因为这个电话号码而惹火上身。美国电话电报公司因电话号码而提起诉讼。官司打了三年才解决。在此期间，BSD陷于停滞，而Linux则借此一飞冲天。他的错误在于没有意识官司竟然持续了如此长的时间，以及BSD会因此受到削弱。如果美国电话电报公司没有起诉，Linux永远不会流行起来，BSD将统治世界。</p></blockquote><h2 id="Linux的不同版本以及应用领域"><a href="#Linux的不同版本以及应用领域" class="headerlink" title="Linux的不同版本以及应用领域"></a>Linux的不同版本以及应用领域</h2><h3 id="Linux内核版本"><a href="#Linux内核版本" class="headerlink" title="Linux内核版本"></a>Linux内核版本</h3><p>内核(kernel)是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。</p><p>Linux内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环：</p><ul><li>稳定版：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些bug或加入一些新的驱动程序。</li><li>开发版：由于要试验各种解决方案，所以变化很快。</li></ul><p><a href="https://www.kernel.org/" target="_blank" rel="noopener">Linux官网</a>，所有来自全世界的对Linux源码的修改最终都会汇总到这个网站，由Linus领导的开源社区对其进行甄别和修改最终决定是否进入到Linux主线内核源码中。</p><h3 id="Linux发行版本"><a href="#Linux发行版本" class="headerlink" title="Linux发行版本"></a>Linux发行版本</h3><p>Linux发行版 (也被叫做GNU/Linux发行版) 通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件。</p><h4 id="RHEL-Red-Hat-Enterprise-Linux"><a href="#RHEL-Red-Hat-Enterprise-Linux" class="headerlink" title="RHEL (Red Hat Enterprise Linux)"></a>RHEL (Red Hat Enterprise Linux)</h4><p>RHEL的地位就像Ubuntu在Linux桌面发行版中的地位一样。Red Hat Enterprise Linux背后的红帽公司是Linux早期最大的企业。多年来，他们不断地对RHEL进行改进，确保大多数软件包和硬件都是RHEL支持或“认证”的。除了认证状态外，长期支持在顶级Linux服务器操作系统中也很重要。该公司声称，全球“财富”500强中有90％的公司使用RHEL，这个数字可以说是非常多了。</p><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><p>如果你不想花钱，但又希望有使用RHEL一般的体验，最好的方法是下载免费的Linux服务器发行版CentOS。从另一个角度来看，这是社区支持的RHEL，但是没有Red Hat的支持。CentOS与RHEL是二进制兼容的，RHEL也成为了该选项很重要的加分点。就像RHEL一样，CentOS软件库包含经过测试的软件，它对生产系统来说是安全和稳定的。说到控制面板，cPanel让CentOS可以提供更好的支持。如果熟悉.rpm软件包和yum软件包管理器，CentOS就是最佳Linux服务器操作系统。</p><h4 id="Ubuntu-LTS"><a href="#Ubuntu-LTS" class="headerlink" title="Ubuntu LTS"></a>Ubuntu LTS</h4><p>与RHEL和CentOS相比，Ubuntu LTS获取软件包的速度更快。这个选择再次归结为用户的特殊需求，如果想要某些应用程序和软件上的所有最新功能，请转到Ubuntu。此外，它拥有广泛的社区，对于愿意跳入Linux世界的初学者而言，也建议这样做。</p><p>谈到性能，Ubuntu提供了一个灵活的性能。开发者可以选择Ubuntu服务器选项，它提供了一些有用的软件包比如邮件服务器，LAMP服务器，Samba文件服务器，OpenStackMitaka，Nginx等。该发行版的5年LTS支持也保证了初学者的使用，开发者可以设置媒体服务器，电子邮件服务器或游戏服务器等场景。</p><h4 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h4><p>为什么一些流行的Linux发行版是基于Debian的呢？这归结于Debian的稳定性。尽管开发者希望在Debian上做的任何事情都可以在Ubuntu上实现，但是如果高于平均水平，稳定性就变得非常重要，我们建议开发者选择Debian。另外要记住的是，Debian只附带免费软件。与Ubuntu相比，它更轻巧，速度更快，这使得它成为旧硬件的合适选择。</p><p>简而言之，如果你正在考虑安全问题并且熟悉Linux的企业环境，并且你需要一个Linux服务器操作系统，相比于Ubuntu，选择Debian更合适。</p><h4 id="SLES-SUSE-Linux-Enterprise-Server"><a href="#SLES-SUSE-Linux-Enterprise-Server" class="headerlink" title="SLES (SUSE Linux Enterprise Server)"></a>SLES (SUSE Linux Enterprise Server)</h4><p>就像RHEL和Canonical一样，SUSE在开源世界中也是一个非常有名的发行版。它始于1992年，是第一家为企业客户推销Linux的公司。该公司的主要产品是SUSE Linux Enterprise Server。 最近与SAP和微软达成合作关系，这也将其带入了不同的企业服务市场。</p><p>使用SLES（和OpenSUSE）的一大优势是YaST软件管理系统，这使许多复杂的任务变得更简单和自动化。它有用户的GUI和命令行界面，这就是SLES也被称为管理友好型Linux发行版的原因。它是为正在寻找多用途Linux服务器发行版的高级用户而打造的。</p><h3 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h3><h4 id="个人桌面领域"><a href="#个人桌面领域" class="headerlink" title="个人桌面领域"></a>个人桌面领域</h4><p>此领域是传统linux应用最薄弱的环节，传统linux由于界面简单、操作复杂、应用软件少的缺点，一直被windows所压制，但近些年来随着ubuntu、fedora等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，linux在个人桌面领域的占有率在逐渐的提高。</p><p>典型代表：ubuntu、fedora、suse linux等</p><h4 id="服务器领域"><a href="#服务器领域" class="headerlink" title="服务器领域"></a>服务器领域</h4><p>linux在服务器领域的应用是其重要分支。</p><p>linux免费、稳定、高效等特点在这里得到了很好的体现，但早期因为维护、运行等原因同样受到了很大的限制，但近些年来linux服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛。</p><p>典型代表：Red Hat公司的AS系列、完全开源的debian系列、suse EnterPrise11系列等。</p><h4 id="嵌入式领域"><a href="#嵌入式领域" class="headerlink" title="嵌入式领域"></a>嵌入式领域</h4><p>linux运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百KB等特点，使其近些年来在嵌入式领域的应用得到非常大的提高。</p><p>主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、等都是其应用领域，得到了摩托罗拉、三星、NEC、Google等公司的大力推广。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/linux.jpg&quot; alt=&quot;Linux&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://jingguanghui.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://jingguanghui.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java中对File的操作</title>
    <link href="https://jingguanghui.github.io/2018/04/20/File/"/>
    <id>https://jingguanghui.github.io/2018/04/20/File/</id>
    <published>2018-04-20T02:09:20.000Z</published>
    <updated>2018-05-14T13:14:14.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/File.jpeg" alt="File" style="width:100%"><br><a id="more"></a><br>一直以来对File类中的API不太了解，今天借着对《Java编程思想（第4版）》中第18.1章File类的学习，做一个相对深入的研究。</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 创建后的文件对象 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_CreateDirectory</span><span class="params">(String as_Path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(!file.isDirectory())&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"路径存在但不是目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果文件夹不存在，则会创建，并返回true;如果存在，则不会创建，并返回false</span></span><br><span class="line">file.mkdirs();</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里普及一下mkdirs()和mkdir()的区别：</p><p>mkdirs()可以建立多级文件夹， mkdir()只会建立一级的文件夹， 如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> File(<span class="string">"/tmp/one/two/three"</span>).mkdirs();</span><br></pre></td></tr></table></figure></p><p>执行后， 会建立tmp/one/two/three四级目录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> File(<span class="string">"/tmp/one/two/three"</span>).mkdir();</span><br></pre></td></tr></table></figure></p><p>则不会建立任何目录， 因为找不到/tmp/one/two目录， 结果返回false</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isDelete 如果文件已存在，是否删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 创建后的文件对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_CreateFile</span><span class="params">(String as_Path,<span class="keyword">boolean</span> isDelete)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(isDelete)&#123;</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">file.delete();</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(as_Path.endsWith(File.separator))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"创建单个文件"</span> +as_Path + <span class="string">"失败，目标文件不能为目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断目标文件所在的目录是否存在 </span></span><br><span class="line"><span class="keyword">if</span>(file.getParentFile()!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!file.getParentFile().exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(!file.getParentFile().mkdirs()) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"创建目标文件所在目录失败！"</span>);      </span><br><span class="line">            &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><div class="note danger"><p>在创建文件时，必须保证目标文件不存在，而且父目录存在，否则会创建失败 </p></div></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除目录（包括子目录） </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 要删除的目录路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isIncludeRoot 是否包含路径本身</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uf_DelTree</span><span class="params">(String as_Path,<span class="keyword">boolean</span> isIncludeRoot)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"要删除的路径不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file.isDirectory())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"路径存在，但不是目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">File[] files=file.listFiles();</span><br><span class="line">String fileName;</span><br><span class="line"><span class="keyword">for</span>(File file1:files)&#123;</span><br><span class="line">fileName=file1.getName();</span><br><span class="line"><span class="keyword">if</span>(file1.isDirectory())&#123;</span><br><span class="line">FileHelper.uf_DelTree(as_Path+File.separator+fileName, <span class="keyword">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">file1.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isIncludeRoot)&#123;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里普及一下File类中的list()和listFiles()方法的区别：</p><ul><li><p>list()方法是返回某个目录下的所有文件和目录的文件名，返回的是String数组</p></li><li><p>listFiles()方法是返回某个目录下所有文件和目录的绝对路径，返回的是File数组</p></li></ul><figure class="highlight java"><figcaption><span>list()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    String[] fileNames=file.list();</span><br><span class="line">    <span class="keyword">for</span>(String fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">build.xml</span><br><span class="line">Documentation1.java</span><br><span class="line">Documentation2.java</span><br><span class="line">Documentation3.java</span><br><span class="line">HelloDate.java</span><br><span class="line">HelloDate1.java</span><br><span class="line">ShowProperties.java</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><figcaption><span>listFiles()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    File[] fileNames=file.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\thinkingInJava\Think in Java 4 code\object\build.xml</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation2.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation3.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\ShowProperties.java</span><br></pre></td></tr></table></figure></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除文件 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Path 要删除的文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uf_DelFile</span><span class="params">(String as_Path)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File file=<span class="keyword">new</span> File(as_Path);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"要删除的文件不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(as_Path.endsWith(File.separator))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除单个文件"</span> +as_Path + <span class="string">"失败，目标文件不能为目录！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!file.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"删除单个文件"</span> +as_Path + <span class="string">"失败，目标文件不是文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_SourFile 源文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_DestFile 目标文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isOvercast 如果目标文件存在是否覆盖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_CopyFile</span><span class="params">(String as_SourFile,String as_DestFile,<span class="keyword">boolean</span> isOvercast)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">File sourFile=<span class="keyword">new</span> File(as_SourFile);</span><br><span class="line"><span class="keyword">if</span>(!sourFile.exists())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"复制文件"</span> +as_SourFile + <span class="string">"失败，源文件不存在！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!sourFile.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"复制文件"</span> +as_SourFile + <span class="string">"失败，源文件不是文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">File destFile=<span class="keyword">new</span> File(as_DestFile);</span><br><span class="line"><span class="keyword">if</span>(destFile.exists())&#123;</span><br><span class="line"><span class="keyword">if</span>(!destFile.isFile())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"复制文件"</span> +as_SourFile + <span class="string">"失败，目标路径"</span>+as_DestFile+<span class="string">"存在,但不是文件！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!isOvercast)&#123;</span><br><span class="line"><span class="keyword">return</span> destFile;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FileInputStream fileInputStream=<span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fileOutputStream=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileInputStream=<span class="keyword">new</span> FileInputStream(sourFile);</span><br><span class="line">fileOutputStream=<span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line"><span class="keyword">byte</span>[] buf=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=fileInputStream.read(buf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">fileOutputStream.write(buf, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fileInputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fileInputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fileOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fileOutputStream.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> destFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目录复制(含子目录)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_sPath 源路径       </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_dPath 目标路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ab_IsIncludeRoot 是否包含源路径本身</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">uf_CopyTree</span><span class="params">(String as_sPath, String as_dPath, <span class="keyword">boolean</span> ab_IsIncludeRoot)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    File lo_sFile = <span class="keyword">new</span> File(as_sPath);</span><br><span class="line">    <span class="keyword">if</span> (!lo_sFile.exists())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并不存在。"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!lo_sFile.isDirectory())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并非目录。"</span>);</span><br><span class="line">    File lo_dFile = <span class="keyword">new</span> File(as_dPath);</span><br><span class="line">    <span class="keyword">if</span> (!lo_dFile.exists())&#123;</span><br><span class="line">    lo_dFile.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!lo_dFile.isDirectory())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"目标路径并非目录。"</span>);</span><br><span class="line">    File lo_NewFile, lo_File;</span><br><span class="line">    String ls_Name;</span><br><span class="line">    <span class="keyword">if</span> (ab_IsIncludeRoot)</span><br><span class="line">    &#123;</span><br><span class="line">        ls_Name = lo_sFile.getName();</span><br><span class="line">        lo_NewFile = <span class="keyword">new</span> File(as_dPath +File.separator + ls_Name);</span><br><span class="line">        <span class="keyword">if</span> (!lo_NewFile.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            lo_NewFile.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!lo_NewFile.isDirectory())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"目标路径存在但并非目录。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FileHelper.uf_CopyTree(as_sPath, as_dPath + File.separator  + ls_Name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        File[] lo_Files = lo_sFile.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; lo_Files.length; ii++)</span><br><span class="line">        &#123;</span><br><span class="line">            lo_File = lo_Files[ii];</span><br><span class="line">            ls_Name = lo_File.getName();</span><br><span class="line">            <span class="keyword">if</span> (lo_File.isDirectory())</span><br><span class="line">            &#123;</span><br><span class="line">                lo_NewFile = <span class="keyword">new</span> File(as_dPath + File.separator  + ls_Name);</span><br><span class="line">                <span class="keyword">if</span> (!lo_NewFile.exists())</span><br><span class="line">                &#123;</span><br><span class="line">                    lo_NewFile.mkdir();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!lo_NewFile.isDirectory())</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"目标路径存在但并非目录。"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                FileHelper.uf_CopyTree(as_sPath + File.separator  + ls_Name, as_dPath + File.separator  + ls_Name, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                FileHelper.uf_CopyFile(as_sPath + File.separator  + ls_Name, as_dPath + File.separator  + ls_Name, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_sFile 源文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_dFile 目标文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ab_IsOvercast 目标文件存在是否覆盖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 移动后的File对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 方法异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">uf_MoveFile</span><span class="params">(String as_sFile, String as_dFile, <span class="keyword">boolean</span> ab_IsOvercast)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    File lo_sFile = <span class="keyword">new</span> File(as_sFile);</span><br><span class="line">    File lo_dFile = FileHelper.uf_CopyFile(as_sFile, as_dFile, ab_IsOvercast);</span><br><span class="line">    lo_sFile.delete();</span><br><span class="line">    <span class="keyword">return</span> lo_dFile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>首先，再普及一下File类中的list()和listFiles()方法的区别：</p><ul><li><p>list()方法是返回某个目录下的所有文件和目录的文件名，返回的是String数组</p></li><li><p>listFiles()方法是返回某个目录下所有文件和目录的绝对路径，返回的是File数组</p></li></ul><figure class="highlight java"><figcaption><span>list()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    String[] fileNames=file.list();</span><br><span class="line">    <span class="keyword">for</span>(String fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">build.xml</span><br><span class="line">Documentation1.java</span><br><span class="line">Documentation2.java</span><br><span class="line">Documentation3.java</span><br><span class="line">HelloDate.java</span><br><span class="line">HelloDate1.java</span><br><span class="line">ShowProperties.java</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><figcaption><span>listFiles()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(<span class="string">"E:/thinkingInJava/Think in Java 4 code/object"</span>);</span><br><span class="line">    File[] fileNames=file.listFiles();</span><br><span class="line">    <span class="keyword">for</span>(File fileName:fileNames)&#123;</span><br><span class="line">    System.out.println(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\thinkingInJava\Think in Java 4 code\object\build.xml</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation2.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\Documentation3.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\HelloDate1.java</span><br><span class="line">E:\thinkingInJava\Think in Java 4 code\object\ShowProperties.java</span><br></pre></td></tr></table></figure></p><h3 id="目录列表器"><a href="#目录列表器" class="headerlink" title="目录列表器"></a>目录列表器</h3><p>对符合条件的文件进行筛选<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 筛选符合条件的文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_sFile 目录文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reg 要筛选的文件正则表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 符合条件的文件集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] uf_ListFile(String as_sFile,<span class="keyword">final</span> String reg)<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    File path = <span class="keyword">new</span> File(as_sFile);</span><br><span class="line">    <span class="keyword">if</span> (!path.exists())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并不存在。"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!path.isDirectory())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"源路径并非目录。"</span>);</span><br><span class="line">    String[] list;</span><br><span class="line">    <span class="keyword">if</span>(reg==<span class="keyword">null</span>||<span class="string">""</span>.equals(reg))</span><br><span class="line">      list = path.list();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">      list = path.list(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">        <span class="keyword">private</span> Pattern pattern = Pattern.compile(reg);</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> pattern.matcher(name).matches();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">//按字母顺序排序</span></span><br><span class="line">    Arrays.sort(list, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><i class="fa fa-book fa-lg"></i><a href="https://github.com/jingguanghui/bolgSource/blob/master/File/FileHelper.java" target="_blank" rel="noopener">查看源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/File.jpeg&quot; alt=&quot;File&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="File" scheme="https://jingguanghui.github.io/tags/File/"/>
    
      <category term="Java I/O系统" scheme="https://jingguanghui.github.io/tags/Java-I-O%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>单点登录</title>
    <link href="https://jingguanghui.github.io/2018/04/19/SingleSignOn/"/>
    <id>https://jingguanghui.github.io/2018/04/19/SingleSignOn/</id>
    <published>2018-04-19T08:04:20.000Z</published>
    <updated>2018-04-22T04:24:00.178Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/SingleSignOn.jpg" alt="SingleSignOn" style="width:100%"><br><a id="more"></a><br>发现一篇讲解单点登录非常好的文章，直接上网址:<a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="noopener">单点登录原理与简单实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/SingleSignOn.jpg&quot; alt=&quot;SingleSignOn&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中MD5加密和JavaScript中MD5加密</title>
    <link href="https://jingguanghui.github.io/2018/04/19/md5/"/>
    <id>https://jingguanghui.github.io/2018/04/19/md5/</id>
    <published>2018-04-19T04:10:20.000Z</published>
    <updated>2018-04-22T04:24:00.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/md5.jpg" alt="JavaScript" style="width:100%"><br><a id="more"></a></p><h2 id="Java中MD5加密"><a href="#Java中MD5加密" class="headerlink" title="Java中MD5加密"></a>Java中MD5加密</h2><p>废话不多说，直接上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Title: Md5Helper类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Description: 获取一个文件或字节数组的MD5信息摘要</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Helper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类禁止外部实例化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Md5Helper</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//donone</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个字节数组的MD5信息摘要</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> as_Info</span></span><br><span class="line"><span class="comment"> *            原始信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> MD5信息摘要</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> java.lang.IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *             如果参数无效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> java.lang.Exception</span></span><br><span class="line"><span class="comment"> *             包含其它任何异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] uf_Md5(<span class="keyword">byte</span>[] as_Info)</span><br><span class="line"><span class="keyword">throws</span> IllegalArgumentException, Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((as_Info == <span class="keyword">null</span>) || (as_Info.length == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"无效参数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">        MessageDigest alga = java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">alga.update(as_Info);</span><br><span class="line"><span class="keyword">return</span> alga.digest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密</span></span><br><span class="line"><span class="comment"> * 字节数组转换为16进制显示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> info 字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 16进制显示字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uf_byte2hex</span><span class="params">(<span class="keyword">byte</span>[] info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String hs = <span class="string">""</span>;</span><br><span class="line">String stmp = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; info.length; n++)</span><br><span class="line">&#123;</span><br><span class="line">stmp = (java.lang.Integer.toHexString(info[n] &amp; <span class="number">0XFF</span>));</span><br><span class="line"><span class="keyword">if</span> (stmp.length() == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">hs = hs + <span class="string">"0"</span> + stmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">hs = hs + stmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*主方法测试</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalArgumentException, Exception </span>&#123;</span><br><span class="line">System.out.println(uf_byte2hex(uf_Md5(<span class="string">"value"</span>.getBytes())));<span class="comment">//2063c1608d6e0baf80249c42e2be5804</span></span><br><span class="line">System.out.println(uf_byte2hex(uf_Md5(<span class="string">"111111"</span>.getBytes())));<span class="comment">//96e79218965eb72c92a549dd5a330112</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JavaScript中MD5加密"><a href="#JavaScript中MD5加密" class="headerlink" title="JavaScript中MD5加密"></a>JavaScript中MD5加密</h2><p>废话不多说，直接上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"yourUrl/md5.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line">或者：  </span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>  </span><br><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hash = md5(<span class="string">"value"</span>);  <span class="comment">// 2063c1608d6e0baf80249c42e2be5804  </span></span><br><span class="line"><span class="keyword">var</span> hash = md5(<span class="string">"111111"</span>);  <span class="comment">// 96e79218965eb72c92a549dd5a330112</span></span><br></pre></td></tr></table></figure></p><p>参考：</p><ol><li><a href="http://www.bootcdn.cn/blueimp-md5/" target="_blank" rel="noopener">http://www.bootcdn.cn/blueimp-md5/</a></li><li><a href="https://github.com/blueimp/JavaScript-MD5" target="_blank" rel="noopener">https://github.com/blueimp/JavaScript-MD5</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/md5.jpg&quot; alt=&quot;JavaScript&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="前端" scheme="https://jingguanghui.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://jingguanghui.github.io/tags/JavaScript/"/>
    
      <category term="js" scheme="https://jingguanghui.github.io/tags/js/"/>
    
      <category term="加密技术" scheme="https://jingguanghui.github.io/tags/%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中取得链接参数某参数的值</title>
    <link href="https://jingguanghui.github.io/2018/04/19/JavaScript_1/"/>
    <id>https://jingguanghui.github.io/2018/04/19/JavaScript_1/</id>
    <published>2018-04-19T01:38:20.000Z</published>
    <updated>2018-04-22T04:24:00.178Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/javascript.jpg" alt="JavaScript" style="width:100%"><br><a id="more"></a><br>不多说，直接上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLinkValue</span>(<span class="params">paraName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> strHref = <span class="built_in">window</span>.document.location.href;</span><br><span class="line"><span class="keyword">var</span> intPos = strHref.indexOf(<span class="string">"?"</span>);</span><br><span class="line"><span class="keyword">var</span> strRight = strHref.substr(intPos + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> arrTmp = strRight.split(<span class="string">"&amp;"</span>);</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrTmp.length; i=i+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> arrTemp = arrTmp[i].split(<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">if</span> (arrTemp[<span class="number">0</span>].toUpperCase() == paraName.toUpperCase()) <span class="keyword">return</span> arrTemp[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TITLE</span>&gt;</span> New Document <span class="tag">&lt;/<span class="name">TITLE</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Generator"</span> <span class="attr">CONTENT</span>=<span class="string">"EditPlus"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Author"</span> <span class="attr">CONTENT</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Keywords"</span> <span class="attr">CONTENT</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">NAME</span>=<span class="string">"Description"</span> <span class="attr">CONTENT</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">alert(getLinkValue(<span class="string">'jhg'</span>));</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getLinkValue</span>(<span class="params">paraName</span>)</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> strHref = <span class="built_in">window</span>.document.location.href;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> intPos = strHref.indexOf(<span class="string">"?"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> strRight = strHref.substr(intPos + <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arrTmp = strRight.split(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrTmp.length; i=i+<span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> arrTemp = arrTmp[i].split(<span class="string">"="</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (arrTemp[<span class="number">0</span>].toUpperCase() == paraName.toUpperCase()) <span class="keyword">return</span> arrTemp[<span class="number">1</span>];</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">BODY</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">BODY</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/javascript.jpg&quot; alt=&quot;JavaScript&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://jingguanghui.github.io/categories/JavaScript/"/>
    
    
      <category term="前端" scheme="https://jingguanghui.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://jingguanghui.github.io/tags/JavaScript/"/>
    
      <category term="js" scheme="https://jingguanghui.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>《Maven实战》学习（三）</title>
    <link href="https://jingguanghui.github.io/2018/04/13/maven_3/"/>
    <id>https://jingguanghui.github.io/2018/04/13/maven_3/</id>
    <published>2018-04-13T10:48:20.000Z</published>
    <updated>2018-04-22T04:24:00.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg" alt="maven" style="width:100%"><br><a id="more"></a></p><h2 id="背景案例"><a href="#背景案例" class="headerlink" title="背景案例"></a>背景案例</h2><p>接下里的Maven学习，将引入一个真实的案例来进行学习，该案例的目的还是帮助我们理解Maven的概念， 以及展示大部分Maven项目需要面对和处理的一些问题。</p><h3 id="简单的注册服务"><a href="#简单的注册服务" class="headerlink" title="简单的注册服务"></a>简单的注册服务</h3><p>注册互联网账户是日常生活中再熟悉不过的一件事悄 ，作为一个用户，注册账户的时候往往需要做以下事情：</p><ul><li>提供一个未被使用的账号ID</li><li>提供一个未被使用的Email地址</li><li>提供一个任意的显示名称</li><li>设置安全密码，并重复输入以确认</li><li>输入验证码</li><li>前往邮箱查收激活链接并单击激活账号</li><li>登录</li></ul><p>写这些的主要目的是让读者清楚地了解这个背景案例 即账户注册服务，它的需求是什么？基于这样的一个需求 ，我们会怎样设计这个小型的系统。</p><h3 id="需求阐述"><a href="#需求阐述" class="headerlink" title="需求阐述"></a>需求阐述</h3><p>下面从软件工程的视角来分析一下该服务的需求：</p><h4 id="需求用例"><a href="#需求用例" class="headerlink" title="需求用例"></a>需求用例</h4><blockquote><p><strong>注册账户</strong><br>主耍场景：</p><blockquote><p>1.用户访问注册页面<br>2.系统生成验证码图片<br>3.用户输入想要的ID、Email地址，想要的显示名称、密码、确认密码<br>4.用户输入验证码<br>5.用户提交注册请求<br>6.系统检查验证码<br>7.系统检查ID是否已经被注册，Email是否已经被注册，密码和确认密码是否一致<br>8.系统保存未激活的账户信息<br>9.系统生成激活链接，井发送至用户邮箱<br>10.用户打开邮箱，访问激活链接<br>11.系统解析激活链接，激活相关账户<br>12.用户使用ID和密码登录</p></blockquote></blockquote><blockquote><p>扩展场景</p><blockquote><p>4a: 用户无法看清验证玛，请求重新生成</p><blockquote><p>1.跳转到步骤2</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>6a: 系统检测到用户输入的验证码错误</p><blockquote><p>1.系统提示验证码错误<br>2.跳转到步骤2</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>7a: 系统检测到ID已被注册，或者Email已被注册，或者密码和确认密码不一致</p><blockquote><p>1.系统提示相关错误信息<br>2.跳转到步骤2</p></blockquote></blockquote></blockquote><p>该用例的角色只有两个：用户和系统。“主要场景”描述了用户如何与系统一步一步地交互，并且成功完成注册; “扩展场景”则描述了一些中途发生意外的情形，比如用户输错验证码的时候，系统就需要从新生成验证码，用户也需要重新输入验证码。</p><h3 id="简要设计"><a href="#简要设计" class="headerlink" title="简要设计"></a>简要设计</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>从需求用例中可以看到，系统对外的接口包括生成验证码图片、处理注册请求、激活账户以及处理登录等。</p><h4 id="模块结构"><a href="#模块结构" class="headerlink" title="模块结构"></a>模块结构</h4><ul><li>cn.jgh.account.service: 系统的核心，它封装了所有下层细节，对外暴露简单的接口。</li><li>cn.jgh.account.web: 顾名思义该模块包含所有与web相关的内容，包括可能的JSP、Servlet、web.xml等，它直接依赖于cn.jgh.account.service模块，使用其提供的服务。</li><li>cn.jgh.maven.account.persist: 处理账户信息的持久化，包括增、删、改、查等。根据实现，可以基于数据库或者文件。</li><li>cn.jgh.account.captcha: 处理验证码的key生成、图片生成以及验证等。这里需要第三方的类库来帮助实现这些功能。</li><li>cn.jgh.account.email: 处理邮件服务的配置、激活邮件的编写和发送。</li></ul><h2 id="坐标和依赖"><a href="#坐标和依赖" class="headerlink" title="坐标和依赖"></a>坐标和依赖</h2><p>正如前面介绍的， Maven的一大功能是管理项目依赖。 为了能自动化地解析任何一个Java构件，Maven就必须将它们唯一标识，这就依赖管理的底层基础——坐标。</p><h3 id="何为Maven坐标？"><a href="#何为Maven坐标？" class="headerlink" title="何为Maven坐标？"></a>何为Maven坐标？</h3><p>Maven的世界中拥有数量非常巨大的构件，也就是平时用的一些jar、war等构件。在Maven为这些构件引人坐标概念之前，我们无法使用任何一种方式来唯一标识所有这些构件。 因此，当需要用到SpringFramework依赖的时候，大家会去SpringFramework网站寻找；当需要用到log4j依赖的时候,大家又会去Apache网站寻找。又因为各个项目的网站风格迥异，大量的时间花费在了搜索、浏览网页等工作上面。 没有统一的规范、统一的法则，该工作就无法自动化。Maven定义了这样一组规则：世界上任何一个构件都可以使用Maven坐标唯一标识，Maven坐标的元素包括groupID、artifactId、version、packaging、classifier。现在，只要我们提供正确的坐标元素，Maven就能找到对应的构件。Maven是从哪里下载构件的呢？答案其实很简单，Maven内置了一个<a href="https://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">中央仓库</a>的地址,该中央仓库包含了世界上大部分流行的开源项目构件， Maven会在需要的时候去那里下载。</p><h3 id="坐标详解"><a href="#坐标详解" class="headerlink" title="坐标详解"></a>坐标详解</h3><p>一组Maven坐标是通过一些元素定义的，它们是groupId、artifactId、version、packaging、classifier。看下面的代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.nexus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-indexer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>groupId：</strong>定义当前Maven项目隶属的实际项目。 首先，Maven项目和实际项目不一定是一对一的关系。 比如 SpringFramework这一实际项目，其对应的Maven项目会有很多，如spring-core、spring-context等。 这是由于Maven中模块的概念，因此，一个实际项目往往会被划分成很多模块。其次，groupId不应该对应项目隶属的组织或公司。原因很简单，一个组织下会有很多实际项目，如果groupId只定义到组织级别,而后面我们会看到artifactId只能定义Maven项目（模块），那么实际项目这个层将难以定义。 最后，groupId的表示方式与Java 包名的表示方式类似，通常与域名反向一一对应。 上面的代码中，groupId为org.sonatype.nexus，org.sonatype表示Sonatype公司建立的一个非盈利性组织，nexus表示Nexus这一实际项目，该groupId与域名 nexus.sonatype.org对应。  </p><p><strong>artifactId：</strong>该元素定义实际项目中的一个Maven项目（模块），推荐的做法是使用实际项目名称作为artifactId的前缀。比如上面的代码中的artifactId是nexus-indexer,使用了实际项目名nexus作为前缀，这样做的好处是方便寻找实际构件。在默认情况下，Ma­ven生成的构件，其文件名会以artifactId作为开头，如nexus-indexer-2.0.0.jar, 使用实际项目名称作为前缀之后，就能方便从一个lib文件夹中找到某个项目的一组构件。 考虑有5个项目，每个项目都有一个core模块，如果没有前缀，我们会行到很多core-1.2.jar这样的文件，加上实际项目名前缀之后， 便能很容易区分foo-core-1.2.jar、bar-core-1.2.jar……  </p><p><strong>version：</strong>该元素定义Maven项目当前所处的版本，如上面的代码中，nexus-indexer的版本是2.0.0。需要注意的是，Maven定义了一套完成的版本规范，以及快照(SNAPSHOT)的概念。 后面会详细讨论版本管理内容。 </p><p><strong>packaging：</strong>该元素定义Maven项目的打包方式。 首先，打包方式通常与所生成构件的文件扩展名对应，如上面的代码中packaging为jar。 最终的文件名为nexus-indexer-2.0.0.jar,而使用war打包方式的Maven项目，最终生成的构件会有一个.war文件，不过这不是绝对的。 其次，打包方式会影响到构建的生命周期，比如jar打包和war打包会使用不同的命令。最后，当不定义packaging的时候，Maven会使用默认值jar。  </p><p>­<strong>classifier：</strong>该元素用来帮助定义构建输出的一些附属构件。附属构件与主构件对应，如上例中的主构件是nexus-indexer-2.0.0.jar, 该项目可能还会通过使用一些插件生成如nexus-indexer-2.0.0-javadoc.jar、 nexus-indexer-2.0.0-sources.jar这样一些附属构件，其包含了Java文档和源代码。这时候，javadoc和sources就是这两个附属构件的classifier。这样，附属构件也就拥有了自己唯一的坐标。 还有一个关于classifier的典型例子是TestNG, TestNG的主构件是基于Java1.4平台的，而它又提供了一个clas­sifier为jdk5的附属构件。注意，不能直接定义项目的classifier, 因为附属构件不是项目直接默认生成的，而是由附加的插件帮助生成。  </p><p>上述5个元素中，groupId、artifactId、version是必须定义的，packaging是可选的（默认为jar),而classifier是不能直接定义的。  </p><p>同时，项目构件的文件名是与坐标相对应的，一般的规则为artifactId-version[-classifier].packaging, [-classifier]表示可选。比如上例nexus-indexer的主构件为nexus-indexer-2.0.0.jar,附属构件有nexus-indexer-2.0.0-javadoc.jar。 这里还要强调的一点是，packaging并非一定与构件扩展名对应，比如packaging为maven-plugin的构件扩展名为jar。</p><h3 id="account-email"><a href="#account-email" class="headerlink" title="account-email"></a>account-email</h3><p>回想在上面提到的背景案例，案例中有一个email模块负责发送账户激活的电子邮件，本节就详细阐述该模块的实现，包括POM配置、主代码和测试代码。由于该背景案例的实现是基于Spring Framework, 因此还会涉及相关的 Spring配置。</p><h4 id="account-email的POM"><a href="#account-email的POM" class="headerlink" title="account-email的POM"></a>account-email的POM</h4><div class="note warning"><p>···未完待续···</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg&quot; alt=&quot;maven&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://jingguanghui.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>《Maven实战》学习（二）</title>
    <link href="https://jingguanghui.github.io/2018/04/12/maven_2/"/>
    <id>https://jingguanghui.github.io/2018/04/12/maven_2/</id>
    <published>2018-04-12T01:35:20.000Z</published>
    <updated>2018-04-22T04:24:00.188Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg" alt="maven" style="width:100%"><br><a id="more"></a></p><h2 id="Maven使用入门"><a href="#Maven使用入门" class="headerlink" title="Maven使用入门"></a>Maven使用入门</h2><h3 id="编写POM"><a href="#编写POM" class="headerlink" title="编写POM"></a>编写POM</h3><p>Maven的核心就是pom.xml。POM(Project Object Model,项目对象模型)定义了项目的基本信息，用于描述项目如何构建，声明项目如何依赖等等。</p><p>新建一个hello-world文件夹，打开该文件夹，新建pom.xml,输入如下内容：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd "</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jgh.hello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码第一行是XML头，指定了该xml的版本和编码方式。</p><p>project是所有pom.xml的根元素，他声明了一些POM相关的命名空间和xsd元素。</p><p>modelVersion指定了当前POM模型的版本，对于Maven2和Maven3来说，它只能是4.0.0。</p><p>这段代码中最重要的是包含groupId、artifactId和verison三行，这三个元素定义了一个项目的基本坐标，在Maven世界中，任何的jar、pom或者war都是以基于这些基本的坐标来进行区分的。</p><p>groupId定义了项目属于哪个组，这些组往往和项目所在的公司或组织存在关联，如果你的公司是mycom,有一个项目为myapp,那么groupId就应该为com.mycom.myapp。</p><p>artifactId定义了当前Maven项目在组中的唯一Id。</p><p>version指定了Hello World项目的当前版本——1.0-SNAPSHOT。SNAPSHOT意为快照，说明该项目还处于开发中，是不稳定的版本，随着项目的发展，verison会不断更新。</p><p>name不是必须的，但推荐写上，当在MyEclipse中导入时，这个名字将作为项目名。</p><h3 id="编写主代码"><a href="#编写主代码" class="headerlink" title="编写主代码"></a>编写主代码</h3><p>项目主代码和测试代码不同，主代码会被打包到最终构件中（如jar）,而测试代码只在运行测试时用到，不会被打包。</p><p>默认情况下，Maven假设项目主代码位于src/main/java目录，我们遵循Maven的预定，创建该目录，然后在该目录下创建cn/jgh/hello/helloworld/HelloWorld.java,代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jgh.hello.helloworld;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello Maven"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.print(<span class="keyword">new</span> HelloWorld().sayHello());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于该Java代码有两点需要注意，首先，在绝大多数情况下应该把项目主代码放到src/main/java目录下（遵循Maven的约定），而无需额外的配置，Maven会自动搜寻该目录找到项目主代码。其次，包名为cn.jgh.hello.helloworld，这与之前在POM中的定义的groupId和artifactId相吻合。一般来说，项目中的Jave包都应该基于项目的groupId和artifactId，这样更加清晰，更加符合逻辑，也方便搜索构件或Java类。</p><p>在项目根目录下运行如下命令行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean compile</span><br></pre></td></tr></table></figure></p><p>clean告诉Maven清理输出目录target/,compile告诉Maven编译项目主代码。首先Maven执行clean任务，删除target/目录。默认情况下，Maven构建的所有输出都在target/目录下，执行compile任务，将项目主代码编译至target/classes目录中（编译好的类为：cn/jgh/hello/helloworld/HelloWorld.class）</p><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p>为了使项目结构保持清晰，主代码与测试代码应该分别位于独立的目录中。</p><p>Maven项目中，默认的测试代码目录是src/test/java,因此，在编写测试用例之前，应该先创建该目录。</p><p>在Java世界中，一般使用JUnit进行单元测试，要使用JUnit,首先需要为Hello World项目添加一个JUnit依赖，修改项目的POM如下代码所示:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd "</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jgh.hello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码中添加了dependencies元素，该元素下可包含多个dependency元素以声明项目的依赖。有了JUnit这段声明，Maven就会自动下载junit-4.7.jar。Maven从哪里下载这些Jar呢？在Maven之前，可以去JUnit的官方网站下载分发包，有了Maven，他会自动访问<a href="https://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">Maven中央仓库</a>，下载需要的文件。我们也可以自己访问该仓库，打开路径junit/junit/4.7/，就可以看到junit-4.7.jar和junit-4.7.pom。</p><p>代码中scope为依赖范围，若依赖范围为test，则表示该依赖只对测试有效。换句话说，测试代码中的import Junit代码是没问题的，但是在主代码中用import Junit代码，就会造成编译错误。如果不声明依赖范围，则默认值为compile，表示该依赖对主代码和测试代码均有效。</p><p>接下来编写测试类，来验证上面编写的Jave类的sayHello()方法是否能在控制台输出“Hello Maven”。在src/test/java目录下创建文件，其内容如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jgh.hello.helloworld;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">HelloWorld helloWorld=<span class="keyword">new</span> HelloWorld();</span><br><span class="line">System.out.println(helloWorld.sayHello());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个典型的单元测试包含三个步骤：</p><ol><li>准备测试类及数据</li><li>执行要测试的行为</li><li>检查结果</li></ol><p>同时，在JUnit4中，需要执行的测试方法都应该以<strong>@Test</strong>进行标注。</p><p>测试用例编写完毕后就可以在项目根目录下调用Maven执行以下命令，进行测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean test</span><br></pre></td></tr></table></figure></p><p>命令行输入的是mvn clean test,而maven执行的可不止这两个任务，在执行test之前，它会先自动执行项目的主资源处理、主代码编译、测试资源处理、测试代码编译等工作，这是Maven生命周期的一个特性，关于Maven的生命周期，后面将会看到。</p><p>Maven从中央仓库下载了junit4.7.pom和junit4.7.jar这两个文件到本地仓库中（~/.m2/reposity）中，供所有的Maven项目使用。</p><p>如果控制台最后输出如下类似代码，则说明测试通过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running cn.jgh.hello.helloworld.HelloWorldTest</span><br><span class="line">Hello Maven</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><h3 id="打包和运行"><a href="#打包和运行" class="headerlink" title="打包和运行"></a>打包和运行</h3><p>Hello World的POM中没有指定打包类型，使用默认的打包类型jar。简单地在项目根目录下调用以下命令进行打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></p><p>可以看到类似如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running cn.jgh.hello.helloworld.HelloWorldTest</span><br><span class="line">Hello Maven</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.048 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line">···</span><br><span class="line">[INFO] Building jar: E:\mavenLearn\hello-world\target\hello-world-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 10.205 s</span><br><span class="line">[INFO] Finished at: 2018-04-12T15:00:34+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><p>类似地Maven会在打包之前进行编译、测试等操作。打包之后的文件也位于target/输出目录下，文件名为hello-world-1.0-SNAPSHOT.jar，它是根据artifact-version.jar规则进行命名的。如果有需要，就可以复制这个jar文件到其他项目的classpath中从而使用HelloWorld类。</p><p>如果要让其他Maven项目直接引用这个jar呢？还需要一个步骤，在项目根目录下执行以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure></p><p>可以看到类似如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">[INFO] Installing E:\mavenLearn\hello-world\target\hello-world-1.0-SNAPSHOT.jar t</span><br><span class="line">epository\cn\jgh\hello\hello-world\1.0-SNAPSHOT\hello-world-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] Installing E:\mavenLearn\hello-world\pom.xml to C:\Users\Administrator\.m2</span><br><span class="line">-world\1.0-SNAPSHOT\hello-world-1.0-SNAPSHOT.pom</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 27.854 s</span><br><span class="line">[INFO] Finished at: 2018-04-12T15:19:03+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">···</span><br></pre></td></tr></table></figure></p><p>同样地，在执行install之前，会执行删除target/,编译，测试和打包等操作。从输出结果中可以看出，install将项目输出的jar包安装到了Maven本地仓库中，可以打开相应的文件夹看到Hello World项目的pom和jar文件。只要将Hello World的构件安装到本地仓库之后，其他的Maven项目就可以使用它。</p><p>因为Hello World类是有一个main方法的，所以是可以运行的，但是默认打包成的jar是不能直接运行的，因为带有main方法的信息不会添加到manifest中(打开jar文件的META-INF/MANIFEST.MF文件，将无法看到Main-Class一行)。我们可以手动添加如下代码到jar文件的META-INF/MANIFEST.MF文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Main-Class: cn.jgh.hello.helloworld.HelloWorld</span><br></pre></td></tr></table></figure></p><p>需要注意的是，Main-Class:之后是一个英文状态下的空格</p><p>然后，在项目根目录下运行以下代码执行jar文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target\hello-world-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></p><p>控制台输出Hello Maven,这正是我们想要的。</p><h3 id="使用Archetype生成项目骨架"><a href="#使用Archetype生成项目骨架" class="headerlink" title="使用Archetype生成项目骨架"></a>使用Archetype生成项目骨架</h3><p>离开当前目录另建一个项目，来测试Maven提供的Archetype帮助我们快速勾勒出项目骨架。</p><p>在新建的目录下，运行以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br></pre></td></tr></table></figure></p><p>接下来将看到一段长长的输出，有很多可用的Archetype可供选择。每一个Archetype前面都会对应一个编号，同时命令行将会提示一个默认的编号，其对应的Archetype为maven-archetype-quickstart,直接回车以选择该Archetype,紧接着Maven会提示要输入项目的groupId、artifactId、version、以及包名package。如下输入并确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Define value for property &apos;groupId&apos;: cn.jgh.maven</span><br><span class="line">Define value for property &apos;artifactId&apos;: hello-world</span><br><span class="line">Define value for property &apos;version&apos; 1.0-SNAPSHOT: :</span><br><span class="line">Define value for property &apos;package&apos; cn.jgh.maven: : cn.jgh.maven.helloworld</span><br><span class="line">Confirm properties configuration:</span><br><span class="line">groupId: cn.jgh.maven</span><br><span class="line">artifactId: hello-world</span><br><span class="line">version: 1.0-SNAPSHOT</span><br><span class="line">package: cn.jgh.maven.helloworld</span><br><span class="line"> Y: : Y</span><br></pre></td></tr></table></figure></p><p>Archetype插件将根据我们提供的信息创建项目骨架。在当前目录下，Archetype插件会创建一个名为hello-world（根据我们定义的artifactId）的子目录，从中可以看到项目的基本结构：基本的pom.xml已经被创建，里面包含了必要的信息以及一个junit依赖；主代码目录src/main/java，在该目录下还有一个Java类cn.jgh.maven.helloworld.APP,同时测试代码目录src/test/java也已经被创建好,并且包含一个测试用例cn.jgh.maven.helloworld.APPTest。</p><p>Archetype可以帮助我们迅速地构建起项目的骨架，在以后的开发中我们就可以使用此种方法生成骨架，然后在此骨架的基础上开发项目以节省大量时间。</p><h3 id="m2eclipse的简单使用"><a href="#m2eclipse的简单使用" class="headerlink" title="m2eclipse的简单使用"></a>m2eclipse的简单使用</h3><h4 id="导入maven项目"><a href="#导入maven项目" class="headerlink" title="导入maven项目"></a>导入maven项目</h4><ol><li>选择菜单项File-&gt;选择Import</li><li>在Import对话框中选择Maven4MyEclipse下的Existing Maven Projects，然后单击next按钮</li><li>在Impott Maven Projects对话框中单击Browse按钮选择Hello World的根目录（即包含pom.xml文件的那个目录）</li><li>单击Finish按钮之后，就会将项目导入到当前的workspace中了</li></ol><p>在Package Explore视图中,可以看到主代码目录结构src/main/java和测试代码目录结构src/test/java成了    MyEclipse中的资源目录，当然pom.xml永远在根目录下，还可以看到项目的依赖junit-4.7.jar,其实际位置指向了指向了Maven本地仓库。</p><h4 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h4><ol><li>选择菜单项File-&gt;New-&gt;Other</li><li>在弹出的对话框中选择Maven4MyEclipse下的Maven Project,然后单击Next按钮</li><li>在弹出的窗口中默认的选项，单击Next按钮</li><li>此时会提示我们选择一个ArcheType，这里选择maven-archetype-quickstart插件创建项目，因此这一步骤和上一节使用的Archetype创建项目骨架类似，输入groupId、artifactId、version、package</li><li>输入完毕后，单击Finish按钮，Maven项目就创建完成了</li></ol><h4 id="运行Maven命令"><a href="#运行Maven命令" class="headerlink" title="运行Maven命令"></a>运行Maven命令</h4><p>在Maven项目或者pom.xml上右击，在弹出的快捷菜单中选择Run As，就能看到常见的Maven命令。选择想要执行的命令，就能执行相应的构件，同时还能在MyEclipse控制台看到构建输出。</p><p>可以看到Run As右边没有我们想要的命令，比如maven clean test,我们可以选择Maven build以自定义Maven运行命令,在弹出对话框的Goals一项中输入我们想要执行的命令，如clean test,设置一下Name,单击Run即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg&quot; alt=&quot;maven&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://jingguanghui.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>《Maven实战》学习（一）</title>
    <link href="https://jingguanghui.github.io/2018/04/11/maven_1/"/>
    <id>https://jingguanghui.github.io/2018/04/11/maven_1/</id>
    <published>2018-04-11T05:08:20.000Z</published>
    <updated>2018-04-22T04:24:00.188Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg" alt="maven" style="width:100%"><br><a id="more"></a></p><h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><h3 id="何为Maven？"><a href="#何为Maven？" class="headerlink" title="何为Maven？"></a>何为Maven？</h3><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</p><h3 id="为什么要用Maven？"><a href="#为什么要用Maven？" class="headerlink" title="为什么要用Maven？"></a>为什么要用Maven？</h3><p>Maven能够帮助我们自动化构建过程，从清理、编译、测试到生成报告，再到打包和部署。</p><p>Maven是跨平台的，这意味着无论在Windows、Linux还是Mac上都可以使用相同的命令。</p><p>Maven最大化地消除了构建的重复，抽象了构建生命周期，并且为绝大部分的构建任务提供了插件，我们不需要实现过程，甚至不再需要去实现这些过程中的一些任务。最简单的例子就是测试，我们没必要告诉Maven去测试，更不需要告诉Maven如何运行测试，只需要遵循Maven的约定编好测试用例，当我们运行构建的时候，这些测试便会自动运行。</p><p>Maven不仅是构建工具，还是一个依赖管理工具和项目信息管理工具。它提供中央仓库，能帮我们自动下载构件。</p><h2 id="Maven的安装和配置"><a href="#Maven的安装和配置" class="headerlink" title="Maven的安装和配置"></a>Maven的安装和配置</h2><h3 id="在Windows上安装Maven"><a href="#在Windows上安装Maven" class="headerlink" title="在Windows上安装Maven"></a>在Windows上安装Maven</h3><h4 id="检查JDK的安装"><a href="#检查JDK的安装" class="headerlink" title="检查JDK的安装"></a>检查JDK的安装</h4><p>Maven可以运行在JDK1.4及以上版本。</p><p>打开命令行，输入以下命令来检查JDK安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo %JAVA_HOME%</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="Maven下载"><a href="#Maven下载" class="headerlink" title="Maven下载"></a>Maven下载</h4><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven下载地址</a>,Windows下是zip文件，如apache-maven-3.5.3-bin.zip。</p><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>在指定的目录中运行以下命令将安装文件解压到当前目录（如D:\Maven）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Maven&gt;jar xvf &quot;D:\Downloads\apache-maven-3.5.3-bin.zip&quot;</span><br></pre></td></tr></table></figure></p><p>设置环境变量，将Maven安装配置到操作系统中：</p><ol><li>右击“计算机”-&gt;“属性”-&gt;“高级系统设置”-&gt;”环境变量”；</li><li>在<strong>系统变量</strong>中新建一个变量，变量名为“M2_HOME”,变量值为Maven的安装目录D:\Maven\apache-maven-3.5.3，单击‘确定’按钮；</li><li>在<strong>系统变量</strong>中找到Path变量，双击Path变量，在变量值末尾添加%M2_HOME%\bin;，（多个值之间用英文分号（;）隔开），单击‘确定’按钮。</li></ol><div class="note danger no-icon"><p>值得注意的是Path环境变量。当我们在cmd中执行命令行时，Windows首先会在当前目录中寻找可执行的脚本或文件，如果没找到，Windows会接着遍历环境变量Path中定义的路径。</p></div>打开一个新的命令行窗口，执行以下命令验证Maven是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><br><br>执行以上之后命令出现类似如下结果，则说明安装成功<div class="note success"><p>Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)<br>Maven home: D:\Maven\apache-maven-3.5.3\bin..<br>Java version: 1.8.0_144, vendor: Oracle Corporation<br>Java home: D:\Java\jdk1.8.0_144\jre<br>Default locale: zh_CN, platform encoding: GBK<br>OS name: “windows 7”, version: “6.1”, arch: “amd64”, family: “windows”<br></p></div><h4 id="升级Maven"><a href="#升级Maven" class="headerlink" title="升级Maven"></a>升级Maven</h4><p>只需要把新下载下来的文件解压到文件目录中，然后替换掉系统变量M2_HOME的变量值即可。</p><h3 id="在基于UNIX的系统上安装Maven"><a href="#在基于UNIX的系统上安装Maven" class="headerlink" title="在基于UNIX的系统上安装Maven"></a>在基于UNIX的系统上安装Maven</h3><h4 id="检查JDK的安装-1"><a href="#检查JDK的安装-1" class="headerlink" title="检查JDK的安装"></a>检查JDK的安装</h4><p>打开命令行，输入以下命令来检查JDK安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo %JAVA_HOME%</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="Maven下载-1"><a href="#Maven下载-1" class="headerlink" title="Maven下载"></a>Maven下载</h4><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven下载地址</a>,UNIX下是tar.gz文件，如apache-maven-3.5.3-bin.tar.gz。</p><h4 id="本地安装-1"><a href="#本地安装-1" class="headerlink" title="本地安装"></a>本地安装</h4><p>在指定的目录中运行以下命令将安装文件解压到当前目录（如D:\Maven）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Maven&gt;tar-xvzf &quot;D:\Downloads\apache-maven-3.5.3-bin.tar.gz&quot;</span><br></pre></td></tr></table></figure></p><p>现在已经创建好了一个Maven安装目录apache-maven-3.5.3，虽然直接使用该目录配置环境后就能使用Maven了，但这里推荐的做法是，在安装目录旁平行地创建一个符号链接，以便日后的升级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln-s apache-maven-3.5.3 apache-maven</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls-l</span><br></pre></td></tr></table></figure><p>接下来，设置M2_HOME环境变量指向符号链接apache-maven,并且把Maven安装目录下的bin/文件添加到系统环境变量PATH中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export M2_HOME=/home/juven/bin/apache-maven</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$ PATH: $ M2-HOME/bin</span><br></pre></td></tr></table></figure><p>运行以下命令检查Maven是否安装成功</p><pre><code>mvn -v</code></pre><h3 id="安装目录分析"><a href="#安装目录分析" class="headerlink" title="安装目录分析"></a>安装目录分析</h3><h4 id="M2-HOME"><a href="#M2-HOME" class="headerlink" title="M2_HOME"></a>M2_HOME</h4><p>M2_HOME即Maven的安装目录，例如D:\Maven\apache-maven-3.5.3。</p><ol><li>bin 该目录包含了mvn运行的脚本，这些脚本用来配置Java命令，准备好classpath和相关的Java系统属性，然后执行Java命令。</li><li>boot 该目录下只有一个文件，对于一般的Maven用户，不用关心该文件</li><li>conf 该目录下包含一个重要的文件settings.xml，后面会多次介绍该文件</li><li>lib 该目录包含了所有Maven运行的Java类库，用户还可以</li><li>LICENSE.txt记录了Maven使用的软件许可证Apache License Version2.0</li><li>NOTICE.txt记录了Maven包含的第三方软件</li><li>README.txt包含了Maven的简要介绍，以及安装需求和如何安装的简要指令</li></ol><h4 id="m2"><a href="#m2" class="headerlink" title="~/.m2"></a>~/.m2</h4><p>在命令行窗口中执行mvn help:system（非必须）,然后可以在用户目录中（例如：C:\Users\Administrator）看到生成的.m文件夹，默认情况下，该文件夹下放置了Maven本地仓库.m2/repository。所有的Maven构件都被存储到该仓库中，以方便重用。</p><h3 id="maven安装最佳实践"><a href="#maven安装最佳实践" class="headerlink" title="maven安装最佳实践"></a>maven安装最佳实践</h3><h4 id="设置MAVEN-OPTS环境变量"><a href="#设置MAVEN-OPTS环境变量" class="headerlink" title="设置MAVEN_OPTS环境变量"></a>设置MAVEN_OPTS环境变量</h4><p>通常设置MAVEN_OPTS的值为-Xms128m -Xmx512m,因为Java默认的最大可用内存往往不能满足Maven运行的需要,容易得到java.lang.OutofMemeoryError,所以一开始就配置是推荐的做法。</p><p>关于如何设置环境变量，请参考前面设置M2_HOME环境变量的做法，尽量不要直接修改mvn.bat或者mvn这两个Maven执行脚本文件。因为如果修改了脚本文件，升级Maven时就不得不再次去修改，同理，应该尽可能地不去修改Maven安装目录下的任何文件。</p><h4 id="配置用户范围的settings-xml"><a href="#配置用户范围的settings-xml" class="headerlink" title="配置用户范围的settings.xml"></a>配置用户范围的settings.xml</h4><p>用户可以选择配置M2_HOME/conf/settings,xml或者~/.m2/settings.xml。前者是全局范围的，整台机器上的用户都会受到该配置的影响，而后者是用户范围的，只有当前用户才会受到该配置的影响。</p><p>推荐使用用户范围的settings.xml,一方面既不影响其他用户，另一方面升级之后也不用替换新升级文件夹下的settings.xml。</p><h4 id="不要使用IDE内嵌的Maven"><a href="#不要使用IDE内嵌的Maven" class="headerlink" title="不要使用IDE内嵌的Maven"></a>不要使用IDE内嵌的Maven</h4><p>一般情况下，IDE内嵌的Maven通常都比较新，但不一定很稳定，而且往往和命令行使用的Maven不是同一个版本。这里又出现两个潜在的问题：首先，较新版本的Maven存在很多不稳定因素，容易造成一些难以理解的问题；其次，除了IDE，还经常会使用命令行的Maven,如果版本不一致，则容易造成构件行为的不一致。所以，应该在IDE中配置Maven插件，使用与命令行一致的Maven。</p><p>在MyEclipse中，单击菜单栏中的Window,选择Preferences,在左边菜单栏中，单击MyEclipse,然后单击Maven4MyEclipse,选择Installation子项，在右边的画板中，能够看到有一个默认的Embedded Maven安装被选中了。单击Add…按钮，然后选择Maven安装目录M2_HOME，添加完毕之后勾选这一外部的Maven</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/1184808_e345.jpg&quot; alt=&quot;maven&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://jingguanghui.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://jingguanghui.github.io/tags/Java/"/>
    
      <category term="Maven" scheme="https://jingguanghui.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Tools</title>
    <link href="https://jingguanghui.github.io/2018/04/11/tools/"/>
    <id>https://jingguanghui.github.io/2018/04/11/tools/</id>
    <published>2018-04-11T03:28:02.000Z</published>
    <updated>2018-05-14T13:36:42.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/business-computer-connection-270640.jpg" alt="tools" style="width:100%"><br><a id="more"></a></p><p><div class="note info"><p>工欲善其事，必先利其器</p></div></p><h2 id="PDF阅读器"><a href="#PDF阅读器" class="headerlink" title="PDF阅读器"></a>PDF阅读器</h2><p>小巧好用的PDF阅读器：<a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="noopener">SumatraPDF下载</a></p><p><a href="https://www.cnblogs.com/tsingke/p/6436017.html" target="_blank" rel="noopener">SumatraPDF快捷键</a></p><h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><p>所写即所得：<a href="http://markdownpad.com/download.html" target="_blank" rel="noopener">MarkdownPad下载</a></p><p>注册码</p><p>User：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Soar360@live.com</span><br></pre></td></tr></table></figure><p>授权：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure></p><h2 id="高清图库"><a href="#高清图库" class="headerlink" title="高清图库"></a>高清图库</h2><p><a href="https://zhuanlan.zhihu.com/p/23411438" target="_blank" rel="noopener">10 个免费的高清图库网站，强烈推荐☞☞☞</a></p><h2 id="lrc歌词下载"><a href="#lrc歌词下载" class="headerlink" title="lrc歌词下载"></a>lrc歌词下载</h2><p><a href="http://www.lrcgc.com/" target="_blank" rel="noopener">lrc歌词下载</a></p><h2 id="视频播发器"><a href="#视频播发器" class="headerlink" title="视频播发器"></a>视频播发器</h2><p>低内存占用、无广告、功能强大又唯美的本地播放器<a href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener">PotPlayer</a></p><h2 id="技术书单"><a href="#技术书单" class="headerlink" title="技术书单"></a>技术书单</h2><p><a href="http://blog.jobbole.com/106093/" target="_blank" rel="noopener">如果有人让你推荐编程技术书，请叫他看这个列表</a></p><h2 id="脚本工具"><a href="#脚本工具" class="headerlink" title="脚本工具"></a>脚本工具</h2><p><a href="https://sleazyfork.org/zh-CN" target="_blank" rel="noopener">老司机开车脚本</a></p><p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">一些实用的脚本</a></p><h2 id="网站导航"><a href="#网站导航" class="headerlink" title="网站导航"></a>网站导航</h2><p><a href="http://ilxdh.com/" target="_blank" rel="noopener">龙轩导航</a></p><p><a href="http://so.byr.wiki/" target="_blank" rel="noopener">一个框，全能搜</a></p><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><p><a href="http://listen1.github.io/listen1/" target="_blank" rel="noopener">音乐</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/business-computer-connection-270640.jpg&quot; alt=&quot;tools&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="https://jingguanghui.github.io/categories/Tool/"/>
    
    
      <category term="工具" scheme="https://jingguanghui.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="PDF" scheme="https://jingguanghui.github.io/tags/PDF/"/>
    
      <category term="图库" scheme="https://jingguanghui.github.io/tags/%E5%9B%BE%E5%BA%93/"/>
    
      <category term="Markdown" scheme="https://jingguanghui.github.io/tags/Markdown/"/>
    
      <category term="视频播放器" scheme="https://jingguanghui.github.io/tags/%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>3344——Forever</title>
    <link href="https://jingguanghui.github.io/2018/04/09/friends/"/>
    <id>https://jingguanghui.github.io/2018/04/09/friends/</id>
    <published>2018-04-09T14:14:48.000Z</published>
    <updated>2018-04-11T13:34:18.152Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/hexo-next-optimization-title.jpg" alt="朋友" style="width:100%"><br><a id="more"></a><br>        <div id="aplayer-CeHJvwja" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-CeHJvwja"),            narrow: false,            autoplay: true,            showlrc: 3,            music: {              title: "朋友",              author: "龙井说唱",              url: "http://p6v6hsmcp.bkt.clouddn.com/%E9%BE%99%E4%BA%95%E8%AF%B4%E5%94%B1%20-%20%E6%9C%8B%E5%8F%8B.mp3",              pic: "http://p6v6hsmcp.bkt.clouddn.com/timg%20%286%29.jpg",              lrc: "http://p6v6hsmcp.bkt.clouddn.com/%E9%BE%99%E4%BA%95%E8%AF%B4%E5%94%B1-%E6%9C%8B%E5%8F%8B.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script></p><div class="note info"><p>人之间的友谊，并非由于说不尽的好处，倒是说不出的要好。  ——钱钟书</p></div>为什么要引用钱钟书先生说的话呢，因为我不知道该怎么开头。就算是引用了又怎么样呢，我还是不知道写什么。如果让我在写文章和吃屎之间做个选择的话，我会毫不犹豫的选择写文章(&gt;▽&lt;)。<br><br>写这篇文章是为了感谢3344的兄弟姐妹们对我个人博客的支持和鼓励，也纪念3344的我们在一起九年了。在这里首先谢谢秀梅，许浩和秀才的红包，在我装逼的时候给我捧场，谢谢你们，么么哒。<br><br>说实在的，这个年龄写这个有点矫情了，但谁在乎呢（道系还是佛系？）。2009年，很荣幸的把我分到了0830班，又阴差阳错的进了3344寝室 ，确认过眼神，我遇到对的人，嗯，这些都是对的人。<br><h4>彦武</h4>彦武，我的老大哥，我们认识已经十一年了，本来想送你一首《十一年》呢，但是我忍住了(认真脸)。接下来的五一就是你的大喜日子了，小弟在这里祝你和浏阳百年好合，早生贵子，我还等着当叔叔呢。<br>最后，一首歌送给你们。<br>        <div id="aplayer-DJJUgRdB" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-DJJUgRdB"),            narrow: false,            autoplay: false,            showlrc: 3,            music: {              title: "给你们",              author: "张宇",              url: "http://p6v6hsmcp.bkt.clouddn.com/%E5%BC%A0%E5%AE%87%20-%20%E7%BB%99%E4%BD%A0%E4%BB%AC.mp3",              pic: "http://p6v6hsmcp.bkt.clouddn.com/u=3963152680,1514268489&fm=27&gp=0.jpg",              lrc: "http://p6v6hsmcp.bkt.clouddn.com/%E5%BC%A0%E5%AE%87-%E7%BB%99%E4%BD%A0%E4%BB%AC.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><br><h4>东升</h4>东升，人生赢家，把大家的秀梅拐走了，我就不谴责你了，因为我估计还排不上队，就留给他们谴责吧，哈哈。<br>说点正事，赶紧和秀梅把证领了，把事办了，大家还都等着喝喜酒呢。<br><h4>壮</h4>壮，当爹的人了，大家的表率，在幸福的道路上已经超越了我们一圈，也是我们走向人生幸福道路的领头羊。说这么多，其实是想让你传授一下经验，带领以许浩为代表的单身狗们早日走向人生巅峰。毕竟以你这模样还能娶到嫂子这么漂亮贤惠的姑娘，大概是情圣了吧。<br>说你丑，十一长大不会打我吧。<br><h4>扬飞</h4>扬飞，我们的曹老师。自从你当了老师之后，让我对老师有了从新的认识，原来人还可以这么衣冠禽兽。当然了，也谢谢你带我认识了另外一位老师，苍老师，我和她已经好久没联系了，不知道你还能牵上线吗？<br>最后，祝艳彩你俩早点办事。<br><h4>秀才</h4>秀才，一个假的印度人。只想告诉你，在广西那边少嫖点娼。你这人渣不如的东西，你对的起你的家人吗？你对的起你自己的良心吗？你自己想想。不是我骂你，你就知道享受她们的肉体，可是你有没有想过你的家人，你未来的女朋友，你简直就是畜生。<br>我不想多说，只想对你说，下次再有这种事发生，请带上我，知道吗？保持联络！<br><h4>孙宽</h4>孙宽，我们唯一的研究生。多吃点饭，把自己养胖了，还有赶紧给我找个嫂子，不要搞基。<br><h4>许浩</h4>许浩，哥哥。人到中年不得已，保温杯里泡枸杞。多锻炼身体，看你虚的，这几天是不是又病了，还记得你曾经是多么的猛男吗？最近，看你在微信运动里，一天天的占领我的朋友圈，感到压力的同时，也感觉那个猛男要回来了。<br>加油吧哥哥，早日给我找个嫂子。<br><h4>胡</h4>胡，同样的人生赢家，曾经那个带我打英雄联盟的小胖子（并不是个子低，只是胖的不明显），现在也已经结婚了，走在了人生幸福的道路上。<br>最后，祝督京老师你俩早生贵子。<br><h4>秀梅</h4>秀梅，我们的大妹妹。为什么你和东升在一块了还要单列出来呢，可能是我受了贿赂吧。<br>赶紧和东升把事办了，看好你们哦。<br><h4>小明</h4>小明，我们的小妹妹，一个开了挂的人。赶紧给我们找个妹夫，单身这么多年，你不着急，我们还着急呢。不要怕他欺负你，毕竟你哥哥那么多不是。<br><br><div class="note warning"><p>在一块的就不单独列出来了，在这里再一次祝你们百年好合（当然也包括东升和秀梅哈）。</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/hexo-next-optimization-title.jpg&quot; alt=&quot;朋友&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="friends" scheme="https://jingguanghui.github.io/categories/friends/"/>
    
    
      <category term="friends" scheme="https://jingguanghui.github.io/tags/friends/"/>
    
      <category term="friendship" scheme="https://jingguanghui.github.io/tags/friendship/"/>
    
  </entry>
  
  <entry>
    <title>这一碗好喝的鸡汤</title>
    <link href="https://jingguanghui.github.io/2018/04/06/chicken-soup/"/>
    <id>https://jingguanghui.github.io/2018/04/06/chicken-soup/</id>
    <published>2018-04-06T11:07:03.000Z</published>
    <updated>2018-04-11T13:34:18.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/tiger-2430625_1280.jpg" alt="朋友" style="width:100%"><br><a id="more"></a></p><div class="note primary"><p>比三观更重要的是<br> 五官</p></div><!----><div class="note primary"><p>你无法叫醒一个不回你消息的人<br>但是红包能</p></div><!----><div class="note primary"><p>不要看别人表面上一帆风顺<br>实际上<br>他们背地里也一帆风顺</p></div><!----><div class="note primary"><p>有的时候<br>哭也是可以解决问题的<br>只要你长得足够漂亮</p></div><!----><div class="note primary"><p>你全力做到最好<br>还不如别人随便搞搞</p></div><!----><div class="note primary"><p>生活不止眼前的苟且<br>还有前任发来的请帖</p></div><!----><div class="note primary"><p>我妈常跟我说<br>找对象的时候<br>不要光看别人的外表<br>也要看看自己的外表</p></div><!----><div class="note primary"><p>如果可以的话<br>请好好爱自己<br>因为这个世界上没人会爱你</p></div><!----><div class="note primary"><p>有的时候你不努力一下<br>还真的不知道什么是绝望</p></div><!----><div class="note primary"><p>所有的事情<br>都会<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>慢慢<br>好起来的</p></div><!----><div class="note primary"><p>我真的不懂<br>为什么我那么穷<br>还能吃那么胖</p></div><!----><div class="note primary"><p>你们之所以喝鸡汤<br>是因为<br>肉被别人吃了</p></div><!----><div class="note primary"><p>努力不一定会成功<br>但是不努力<br>一定会很轻松</p></div><!----><div class="note primary"><p>有人出现在你的生命里<br>就是为了告诉你<br>你真好骗</p></div><!----><div class="note primary"><p>你以为有钱人他就很快乐吗<br>他们的快乐你都想象不到</p></div><!----><div class="note primary"><p>喜欢一个人就去表白<br>万一成备胎了呢</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/tiger-2430625_1280.jpg&quot; alt=&quot;朋友&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://jingguanghui.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://jingguanghui.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>First Blog</title>
    <link href="https://jingguanghui.github.io/2018/04/05/hello-world/"/>
    <id>https://jingguanghui.github.io/2018/04/05/hello-world/</id>
    <published>2018-04-05T11:07:03.000Z</published>
    <updated>2018-04-12T13:46:44.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://p6v6hsmcp.bkt.clouddn.com/alphabets-colors-creativity-954599.jpg" alt="Hello" style="width:100%"><br><a id="more"></a><br>        <div id="aplayer-RQMKuGYs" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-RQMKuGYs"),            narrow: false,            autoplay: true,            showlrc: 3,            music: {              title: "Hello",              author: "Adele",              url: "http://p6v6hsmcp.bkt.clouddn.com/Adele%20-%20Hello.mp3",              pic: "http://p6v6hsmcp.bkt.clouddn.com/u=3529119121,1423376518&fm=27&gp=0.jpg",              lrc: "http://p6v6hsmcp.bkt.clouddn.com/Adele-Hello.lrc"            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><br>欢迎来到我的个人博客 <a href="https://jingguanghui.github.io/">一个好人</a>! 这是我的第一篇博客，说实话我不知道写些什么，但俗话说：</p><div class="note info"><p>万事开头难，然后中间难，然后结尾难。</p></div><p>嗯，就是这样，激励着我写下这第一篇博客。</p><h2 id="5W1H分析"><a href="#5W1H分析" class="headerlink" title="5W1H分析"></a>5W1H分析</h2><h3 id="why"><a href="#why" class="headerlink" title="why"></a>why</h3><div class="note success"><p>可能是为了装逼吧，也可能是为了记录些什么，我还分不清楚两者的区别。</p></div><h3 id="what"><a href="#what" class="headerlink" title="what"></a>what</h3><div class="note success">写博客<p></p></div><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><div class="note success">家里or公司<p></p></div><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><div class="note success">空闲的时候<p></p></div><h3 id="who"><a href="#who" class="headerlink" title="who"></a>who</h3><div class="note success">当然是我了，难道是别人不成<p></p></div><h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><div class="note success">用电脑写吧，这个好像还挺难的（认真脸）<p></p></div><p>最后分享一篇最近在知乎上看到的一篇文章，<a href="https://www.zhihu.com/question/43607087/answer/320484467" target="_blank" rel="noopener">人是怎么废掉的？</a>算是给自己提个醒吧~(≧▽≦)/！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p6v6hsmcp.bkt.clouddn.com/alphabets-colors-creativity-954599.jpg&quot; alt=&quot;Hello&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://jingguanghui.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://jingguanghui.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="https://jingguanghui.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
